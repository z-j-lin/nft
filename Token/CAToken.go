// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CAToken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CATokenMetaData contains all meta data concerning the CAToken contract.
var CATokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_server\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"deleteIds\",\"type\":\"uint256[]\"}],\"name\":\"DeletedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serverAddress\",\"type\":\"address\"}],\"name\":\"addServerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"deleteIds\",\"type\":\"uint256[]\"}],\"name\":\"expiredContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfDedstruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004dd938038062004dd98339818101604052810190620000379190620005fd565b8282816000908051906020019062000051929190620004b8565b5080600190805190602001906200006a929190620004b8565b5050506200008d620000816200014460201b60201c565b6200014c60201b60201c565b620000b16000801b620000a56200014460201b60201c565b6200021260201b60201c565b620000e37fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc77826200021260201b60201c565b620001247fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc77620001186200014460201b60201c565b6200021260201b60201c565b6200013b600a6200025a60201b620015a21760201c565b50505062000869565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200022982826200027060201b620015b81760201c565b6200025581600760008581526020019081526020016000206200028660201b620015c61790919060201c565b505050565b6001816000016000828254019250508190555050565b620002828282620002be60201b60201c565b5050565b6000620002b6836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003b060201b60201c565b905092915050565b620002d082826200042a60201b60201c565b620003ac5760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620003516200014460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620003c483836200049560201b60201c565b6200041f57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000424565b600090505b92915050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b828054620004c69062000760565b90600052602060002090601f016020900481019282620004ea576000855562000536565b82601f106200050557805160ff191683800117855562000536565b8280016001018555821562000536579182015b828111156200053557825182559160200191906001019062000518565b5b50905062000545919062000549565b5090565b5b80821115620005645760008160009055506001016200054a565b5090565b60006200057f6200057984620006c0565b62000697565b9050828152602081018484840111156200059e576200059d6200082f565b5b620005ab8482856200072a565b509392505050565b600081519050620005c4816200084f565b92915050565b600082601f830112620005e257620005e16200082a565b5b8151620005f484826020860162000568565b91505092915050565b60008060006060848603121562000619576200061862000839565b5b600084015167ffffffffffffffff8111156200063a576200063962000834565b5b6200064886828701620005ca565b935050602084015167ffffffffffffffff8111156200066c576200066b62000834565b5b6200067a86828701620005ca565b92505060406200068d86828701620005b3565b9150509250925092565b6000620006a3620006b6565b9050620006b1828262000796565b919050565b6000604051905090565b600067ffffffffffffffff821115620006de57620006dd620007fb565b5b620006e9826200083e565b9050602081019050919050565b600062000703826200070a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200074a5780820151818401526020810190506200072d565b838111156200075a576000848401525b50505050565b600060028204905060018216806200077957607f821691505b6020821081141562000790576200078f620007cc565b5b50919050565b620007a1826200083e565b810181811067ffffffffffffffff82111715620007c357620007c2620007fb565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200085a81620006f6565b81146200086657600080fd5b50565b61456080620008796000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638da5cb5b1161010f578063b88d4fde116100a2578063d69c3d3011610071578063d69c3d30146105c5578063d6b8b9c9146105e3578063e985e9c5146105ed578063f2fde38b1461061d576101f0565b8063b88d4fde1461052d578063c87b56dd14610549578063ca15c87314610579578063d547741f146105a9576101f0565b80639723fb6d116100de5780639723fb6d146104a75780639aa94b2c146104d7578063a217fddf146104f3578063a22cb46514610511576101f0565b80638da5cb5b1461040b5780639010d07c1461042957806391d148541461045957806395d89b4114610489576101f0565b806336568abe116101875780636352211e116101565780636352211e1461038557806370a08231146103b5578063715018a6146103e55780637dbc690f146103ef576101f0565b806336568abe1461031557806340c10f191461033157806342842e0e1461034d57806342966c6814610369576101f0565b806318cf2834116101c357806318cf28341461028f57806323b872dd146102ad578063248a9ca3146102c95780632f2ff15d146102f9576101f0565b806301ffc9a7146101f557806306fdde0314610225578063081812fc14610243578063095ea7b314610273575b600080fd5b61020f600480360381019061020a9190612fff565b610639565b60405161021c919061360e565b60405180910390f35b61022d61064b565b60405161023a9190613644565b60405180910390f35b61025d60048036038101906102589190613059565b6106dd565b60405161026a91906135a7565b60405180910390f35b61028d60048036038101906102889190612ec9565b610762565b005b61029761087a565b6040516102a49190613629565b60405180910390f35b6102c760048036038101906102c29190612db3565b61089e565b005b6102e360048036038101906102de9190612f52565b6108fe565b6040516102f09190613629565b60405180910390f35b610313600480360381019061030e9190612f7f565b61091e565b005b61032f600480360381019061032a9190612f7f565b610952565b005b61034b60048036038101906103469190612ec9565b610986565b005b61036760048036038101906103629190612db3565b610afb565b005b610383600480360381019061037e9190613059565b610b1b565b005b61039f600480360381019061039a9190613059565b610b77565b6040516103ac91906135a7565b60405180910390f35b6103cf60048036038101906103ca9190612d46565b610c29565b6040516103dc9190613926565b60405180910390f35b6103ed610ce1565b005b61040960048036038101906104049190612d46565b610d69565b005b610413610e12565b60405161042091906135a7565b60405180910390f35b610443600480360381019061043e9190612fbf565b610e3c565b60405161045091906135a7565b60405180910390f35b610473600480360381019061046e9190612f7f565b610e6b565b604051610480919061360e565b60405180910390f35b610491610ed6565b60405161049e9190613644565b60405180910390f35b6104c160048036038101906104bc9190613059565b610f68565b6040516104ce919061360e565b60405180910390f35b6104f160048036038101906104ec9190612f09565b610f88565b005b6104fb611080565b6040516105089190613629565b60405180910390f35b61052b60048036038101906105269190612e89565b611087565b005b61054760048036038101906105429190612e06565b611208565b005b610563600480360381019061055e9190613059565b61126a565b6040516105709190613644565b60405180910390f35b610593600480360381019061058e9190612f52565b611311565b6040516105a09190613926565b60405180910390f35b6105c360048036038101906105be9190612f7f565b611335565b005b6105cd611369565b6040516105da9190613926565b60405180910390f35b6105eb611375565b005b61060760048036038101906106029190612d73565b611416565b604051610614919061360e565b60405180910390f35b61063760048036038101906106329190612d46565b6114aa565b005b6000610644826115f6565b9050919050565b60606000805461065a90613c38565b80601f016020809104026020016040519081016040528092919081815260200182805461068690613c38565b80156106d35780601f106106a8576101008083540402835291602001916106d3565b820191906000526020600020905b8154815290600101906020018083116106b657829003601f168201915b5050505050905090565b60006106e882611670565b610727576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071e90613806565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061076d82610b77565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d5906138a6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107fd6116dc565b73ffffffffffffffffffffffffffffffffffffffff16148061082c575061082b816108266116dc565b611416565b5b61086b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086290613786565b60405180910390fd5b61087583836116e4565b505050565b7fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc7781565b6108af6108a96116dc565b8261179d565b6108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e5906138c6565b60405180910390fd5b6108f983838361187b565b505050565b600060066000838152602001908152602001600020600101549050919050565b6109288282611ad7565b61094d81600760008581526020019081526020016000206115c690919063ffffffff16565b505050565b61095c8282611b00565b6109818160076000858152602001908152602001600020611b8390919063ffffffff16565b505050565b6109b77fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc776109b26116dc565b610e6b565b6109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90613666565b60405180910390fd5b6009600082815260200190815260200160002060009054906101000a900460ff1615610a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4e90613766565b60405180910390fd5b610a6a82610a65600b611bb3565b611bc1565b60016009600083815260200190815260200160002060006101000a81548160ff021916908315150217905550610aa0600b611bb3565b8273ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe60405160405180910390a3610aed600b6115a2565b610af7600a6115a2565b5050565b610b1683838360405180602001604052806000815250611208565b505050565b610b2c610b266116dc565b8261179d565b610b6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b62906138e6565b60405180910390fd5b610b7481611d8f565b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c17906137c6565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c91906137a6565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610ce96116dc565b73ffffffffffffffffffffffffffffffffffffffff16610d07610e12565b73ffffffffffffffffffffffffffffffffffffffff1614610d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5490613826565b60405180910390fd5b610d676000611ea0565b565b610d716116dc565b73ffffffffffffffffffffffffffffffffffffffff16610d8f610e12565b73ffffffffffffffffffffffffffffffffffffffff1614610de5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddc90613826565b60405180910390fd5b610e0f7fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc7782611f66565b50565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610e638260076000868152602001908152602001600020611f9a90919063ffffffff16565b905092915050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060018054610ee590613c38565b80601f0160208091040260200160405190810160405280929190818152602001828054610f1190613c38565b8015610f5e5780601f10610f3357610100808354040283529160200191610f5e565b820191906000526020600020905b815481529060010190602001808311610f4157829003601f168201915b5050505050905090565b60096020528060005260406000206000915054906101000a900460ff1681565b610fb97fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc77610fb46116dc565b610e6b565b610ff8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fef90613846565b60405180910390fd5b60005b815181101561103a5761102782828151811061101a57611019613dd1565b5b6020026020010151610b1b565b808061103290613c9b565b915050610ffb565b50806040516110499190613532565b60405180910390207ff251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f60405160405180910390a250565b6000801b81565b61108f6116dc565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156110fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f490613726565b60405180910390fd5b806005600061110a6116dc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166111b76116dc565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516111fc919061360e565b60405180910390a35050565b6112196112136116dc565b8361179d565b611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f906138c6565b60405180910390fd5b61126484848484611fb4565b50505050565b606061127582611670565b6112b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ab90613886565b60405180910390fd5b60006112be612010565b905060008151116112de5760405180602001604052806000815250611309565b806112e884612027565b6040516020016112f9929190613549565b6040516020818303038152906040525b915050919050565b600061132e60076000848152602001908152602001600020612188565b9050919050565b61133f828261219d565b6113648160076000858152602001908152602001600020611b8390919063ffffffff16565b505050565b600a8060000154905081565b61137d6116dc565b73ffffffffffffffffffffffffffffffffffffffff1661139b610e12565b73ffffffffffffffffffffffffffffffffffffffff16146113f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e890613826565b60405180910390fd5b60006113fb610e12565b90508073ffffffffffffffffffffffffffffffffffffffff16ff5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6114b26116dc565b73ffffffffffffffffffffffffffffffffffffffff166114d0610e12565b73ffffffffffffffffffffffffffffffffffffffff1614611526576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151d90613826565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611596576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158d906136c6565b60405180910390fd5b61159f81611ea0565b50565b6001816000016000828254019250508190555050565b6115c282826121c6565b5050565b60006115ee836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6122a7565b905092915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611669575061166882612317565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661175783610b77565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006117a882611670565b6117e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117de90613746565b60405180910390fd5b60006117f283610b77565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061186157508373ffffffffffffffffffffffffffffffffffffffff16611849846106dd565b73ffffffffffffffffffffffffffffffffffffffff16145b8061187257506118718185611416565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661189b82610b77565b73ffffffffffffffffffffffffffffffffffffffff16146118f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e890613866565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611961576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195890613706565b60405180910390fd5b61196c838383612391565b6119776000826116e4565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119c79190613b1a565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a1e9190613a39565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b611ae0826108fe565b611af181611aec6116dc565b612396565b611afb83836121c6565b505050565b611b086116dc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6c90613906565b60405180910390fd5b611b7f8282612433565b5050565b6000611bab836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612515565b905092915050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c28906137e6565b60405180910390fd5b611c3a81611670565b15611c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c71906136e6565b60405180910390fd5b611c8660008383612391565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611cd69190613a39565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000611d9a82610b77565b9050611da881600084612391565b611db36000836116e4565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e039190613b1a565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611f7082826115b8565b611f9581600760008581526020019081526020016000206115c690919063ffffffff16565b505050565b6000611fa98360000183612629565b60001c905092915050565b611fbf84848461187b565b611fcb84848484612654565b61200a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612001906136a6565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060600082141561206f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612183565b600082905060005b600082146120a157808061208a90613c9b565b915050600a8261209a9190613a8f565b9150612077565b60008167ffffffffffffffff8111156120bd576120bc613e00565b5b6040519080825280601f01601f1916602001820160405280156120ef5781602001600182028036833780820191505090505b5090505b6000851461217c576001826121089190613b1a565b9150600a856121179190613ce4565b60306121239190613a39565b60f81b81838151811061213957612138613dd1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856121759190613a8f565b94506120f3565b8093505050505b919050565b6000612196826000016127eb565b9050919050565b6121a6826108fe565b6121b7816121b26116dc565b612396565b6121c18383612433565b505050565b6121d08282610e6b565b6122a35760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506122486116dc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006122b383836127fc565b61230c578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612311565b600090505b92915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061238a57506123898261281f565b5b9050919050565b505050565b6123a08282610e6b565b61242f576123c58173ffffffffffffffffffffffffffffffffffffffff166014612901565b6123d38360001c6020612901565b6040516020016123e492919061356d565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124269190613644565b60405180910390fd5b5050565b61243d8282610e6b565b156125115760006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506124b66116dc565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b6000808360010160008481526020019081526020016000205490506000811461261d5760006001826125479190613b1a565b905060006001866000018054905061255f9190613b1a565b90508181146125ce5760008660000182815481106125805761257f613dd1565b5b90600052602060002001549050808760000184815481106125a4576125a3613dd1565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806125e2576125e1613da2565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612623565b60009150505b92915050565b600082600001828154811061264157612640613dd1565b5b9060005260206000200154905092915050565b60006126758473ffffffffffffffffffffffffffffffffffffffff16612b3d565b156127de578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261269e6116dc565b8786866040518563ffffffff1660e01b81526004016126c094939291906135c2565b602060405180830381600087803b1580156126da57600080fd5b505af192505050801561270b57506040513d601f19601f82011682018060405250810190612708919061302c565b60015b61278e573d806000811461273b576040519150601f19603f3d011682016040523d82523d6000602084013e612740565b606091505b50600081511415612786576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161277d906136a6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506127e3565b600190505b949350505050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806128ea57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806128fa57506128f982612b50565b5b9050919050565b6060600060028360026129149190613ac0565b61291e9190613a39565b67ffffffffffffffff81111561293757612936613e00565b5b6040519080825280601f01601f1916602001820160405280156129695781602001600182028036833780820191505090505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129a1576129a0613dd1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a0557612a04613dd1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612a459190613ac0565b612a4f9190613a39565b90505b6001811115612aef577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612a9157612a90613dd1565b5b1a60f81b828281518110612aa857612aa7613dd1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612ae890613c0e565b9050612a52565b5060008414612b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2a90613686565b60405180910390fd5b8091505092915050565b600080823b905060008111915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000612bcd612bc884613966565b613941565b90508083825260208201905082856020860282011115612bf057612bef613e34565b5b60005b85811015612c205781612c068882612d31565b845260208401935060208301925050600181019050612bf3565b5050509392505050565b6000612c3d612c3884613992565b613941565b905082815260208101848484011115612c5957612c58613e39565b5b612c64848285613bcc565b509392505050565b600081359050612c7b816144b7565b92915050565b600082601f830112612c9657612c95613e2f565b5b8135612ca6848260208601612bba565b91505092915050565b600081359050612cbe816144ce565b92915050565b600081359050612cd3816144e5565b92915050565b600081359050612ce8816144fc565b92915050565b600081519050612cfd816144fc565b92915050565b600082601f830112612d1857612d17613e2f565b5b8135612d28848260208601612c2a565b91505092915050565b600081359050612d4081614513565b92915050565b600060208284031215612d5c57612d5b613e43565b5b6000612d6a84828501612c6c565b91505092915050565b60008060408385031215612d8a57612d89613e43565b5b6000612d9885828601612c6c565b9250506020612da985828601612c6c565b9150509250929050565b600080600060608486031215612dcc57612dcb613e43565b5b6000612dda86828701612c6c565b9350506020612deb86828701612c6c565b9250506040612dfc86828701612d31565b9150509250925092565b60008060008060808587031215612e2057612e1f613e43565b5b6000612e2e87828801612c6c565b9450506020612e3f87828801612c6c565b9350506040612e5087828801612d31565b925050606085013567ffffffffffffffff811115612e7157612e70613e3e565b5b612e7d87828801612d03565b91505092959194509250565b60008060408385031215612ea057612e9f613e43565b5b6000612eae85828601612c6c565b9250506020612ebf85828601612caf565b9150509250929050565b60008060408385031215612ee057612edf613e43565b5b6000612eee85828601612c6c565b9250506020612eff85828601612d31565b9150509250929050565b600060208284031215612f1f57612f1e613e43565b5b600082013567ffffffffffffffff811115612f3d57612f3c613e3e565b5b612f4984828501612c81565b91505092915050565b600060208284031215612f6857612f67613e43565b5b6000612f7684828501612cc4565b91505092915050565b60008060408385031215612f9657612f95613e43565b5b6000612fa485828601612cc4565b9250506020612fb585828601612c6c565b9150509250929050565b60008060408385031215612fd657612fd5613e43565b5b6000612fe485828601612cc4565b9250506020612ff585828601612d31565b9150509250929050565b60006020828403121561301557613014613e43565b5b600061302384828501612cd9565b91505092915050565b60006020828403121561304257613041613e43565b5b600061305084828501612cee565b91505092915050565b60006020828403121561306f5761306e613e43565b5b600061307d84828501612d31565b91505092915050565b60006130928383613523565b60208301905092915050565b6130a781613b4e565b82525050565b60006130b8826139d3565b6130c28185613a01565b93506130cd836139c3565b8060005b838110156130fe5781516130e58882613086565b97506130f0836139f4565b9250506001810190506130d1565b5085935050505092915050565b61311481613b60565b82525050565b61312381613b6c565b82525050565b6000613134826139de565b61313e8185613a0c565b935061314e818560208601613bdb565b61315781613e48565b840191505092915050565b600061316d826139e9565b6131778185613a1d565b9350613187818560208601613bdb565b61319081613e48565b840191505092915050565b60006131a6826139e9565b6131b08185613a2e565b93506131c0818560208601613bdb565b80840191505092915050565b60006131d9602d83613a1d565b91506131e482613e59565b604082019050919050565b60006131fc602083613a1d565b915061320782613ea8565b602082019050919050565b600061321f603283613a1d565b915061322a82613ed1565b604082019050919050565b6000613242602683613a1d565b915061324d82613f20565b604082019050919050565b6000613265601c83613a1d565b915061327082613f6f565b602082019050919050565b6000613288602483613a1d565b915061329382613f98565b604082019050919050565b60006132ab601983613a1d565b91506132b682613fe7565b602082019050919050565b60006132ce602c83613a1d565b91506132d982614010565b604082019050919050565b60006132f1602d83613a1d565b91506132fc8261405f565b604082019050919050565b6000613314603883613a1d565b915061331f826140ae565b604082019050919050565b6000613337602a83613a1d565b9150613342826140fd565b604082019050919050565b600061335a602983613a1d565b91506133658261414c565b604082019050919050565b600061337d602083613a1d565b91506133888261419b565b602082019050919050565b60006133a0602c83613a1d565b91506133ab826141c4565b604082019050919050565b60006133c3602083613a1d565b91506133ce82614213565b602082019050919050565b60006133e6602e83613a1d565b91506133f18261423c565b604082019050919050565b6000613409602983613a1d565b91506134148261428b565b604082019050919050565b600061342c602f83613a1d565b9150613437826142da565b604082019050919050565b600061344f602183613a1d565b915061345a82614329565b604082019050919050565b6000613472603183613a1d565b915061347d82614378565b604082019050919050565b6000613495601783613a2e565b91506134a0826143c7565b601782019050919050565b60006134b8603083613a1d565b91506134c3826143f0565b604082019050919050565b60006134db601183613a2e565b91506134e68261443f565b601182019050919050565b60006134fe602f83613a1d565b915061350982614468565b604082019050919050565b61351d81613bc2565b82525050565b61352c81613bc2565b82525050565b600061353e82846130ad565b915081905092915050565b6000613555828561319b565b9150613561828461319b565b91508190509392505050565b600061357882613488565b9150613584828561319b565b915061358f826134ce565b915061359b828461319b565b91508190509392505050565b60006020820190506135bc600083018461309e565b92915050565b60006080820190506135d7600083018761309e565b6135e4602083018661309e565b6135f16040830185613514565b81810360608301526136038184613129565b905095945050505050565b6000602082019050613623600083018461310b565b92915050565b600060208201905061363e600083018461311a565b92915050565b6000602082019050818103600083015261365e8184613162565b905092915050565b6000602082019050818103600083015261367f816131cc565b9050919050565b6000602082019050818103600083015261369f816131ef565b9050919050565b600060208201905081810360008301526136bf81613212565b9050919050565b600060208201905081810360008301526136df81613235565b9050919050565b600060208201905081810360008301526136ff81613258565b9050919050565b6000602082019050818103600083015261371f8161327b565b9050919050565b6000602082019050818103600083015261373f8161329e565b9050919050565b6000602082019050818103600083015261375f816132c1565b9050919050565b6000602082019050818103600083015261377f816132e4565b9050919050565b6000602082019050818103600083015261379f81613307565b9050919050565b600060208201905081810360008301526137bf8161332a565b9050919050565b600060208201905081810360008301526137df8161334d565b9050919050565b600060208201905081810360008301526137ff81613370565b9050919050565b6000602082019050818103600083015261381f81613393565b9050919050565b6000602082019050818103600083015261383f816133b6565b9050919050565b6000602082019050818103600083015261385f816133d9565b9050919050565b6000602082019050818103600083015261387f816133fc565b9050919050565b6000602082019050818103600083015261389f8161341f565b9050919050565b600060208201905081810360008301526138bf81613442565b9050919050565b600060208201905081810360008301526138df81613465565b9050919050565b600060208201905081810360008301526138ff816134ab565b9050919050565b6000602082019050818103600083015261391f816134f1565b9050919050565b600060208201905061393b6000830184613514565b92915050565b600061394b61395c565b90506139578282613c6a565b919050565b6000604051905090565b600067ffffffffffffffff82111561398157613980613e00565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156139ad576139ac613e00565b5b6139b682613e48565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613a4482613bc2565b9150613a4f83613bc2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613a8457613a83613d15565b5b828201905092915050565b6000613a9a82613bc2565b9150613aa583613bc2565b925082613ab557613ab4613d44565b5b828204905092915050565b6000613acb82613bc2565b9150613ad683613bc2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613b0f57613b0e613d15565b5b828202905092915050565b6000613b2582613bc2565b9150613b3083613bc2565b925082821015613b4357613b42613d15565b5b828203905092915050565b6000613b5982613ba2565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613bf9578082015181840152602081019050613bde565b83811115613c08576000848401525b50505050565b6000613c1982613bc2565b91506000821415613c2d57613c2c613d15565b5b600182039050919050565b60006002820490506001821680613c5057607f821691505b60208210811415613c6457613c63613d73565b5b50919050565b613c7382613e48565b810181811067ffffffffffffffff82111715613c9257613c91613e00565b5b80604052505050565b6000613ca682613bc2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613cd957613cd8613d15565b5b600182019050919050565b6000613cef82613bc2565b9150613cfa83613bc2565b925082613d0a57613d09613d44565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f796f7520646f6e277420686176652061636365737320746f20746865206d696e60008201527f74696e672066756e6374696f6e00000000000000000000000000000000000000602082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f6e6f6e636520697320616c72656164792075736564206279206120707265766960008201527f6f7573206d696e742063616c6c00000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f746869732069732061776b776172642c20796f75277265206e6f7420616c6c6f60008201527f77656420746f20646f2074686174000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6144c081613b4e565b81146144cb57600080fd5b50565b6144d781613b60565b81146144e257600080fd5b50565b6144ee81613b6c565b81146144f957600080fd5b50565b61450581613b76565b811461451057600080fd5b50565b61451c81613bc2565b811461452757600080fd5b5056fea26469706673582212204f3dfe50203013cc30b4e447d6369eb3450ed828302b29b55b80754156be2fa864736f6c63430008070033",
}

// CATokenABI is the input ABI used to generate the binding from.
// Deprecated: Use CATokenMetaData.ABI instead.
var CATokenABI = CATokenMetaData.ABI

// CATokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CATokenMetaData.Bin instead.
var CATokenBin = CATokenMetaData.Bin

// DeployCAToken deploys a new Ethereum contract, binding an instance of CAToken to it.
func DeployCAToken(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, _server common.Address) (common.Address, *types.Transaction, *CAToken, error) {
	parsed, err := CATokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CATokenBin), backend, name, symbol, _server)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CAToken{CATokenCaller: CATokenCaller{contract: contract}, CATokenTransactor: CATokenTransactor{contract: contract}, CATokenFilterer: CATokenFilterer{contract: contract}}, nil
}

// CAToken is an auto generated Go binding around an Ethereum contract.
type CAToken struct {
	CATokenCaller     // Read-only binding to the contract
	CATokenTransactor // Write-only binding to the contract
	CATokenFilterer   // Log filterer for contract events
}

// CATokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type CATokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CATokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CATokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CATokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CATokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CATokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CATokenSession struct {
	Contract     *CAToken          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CATokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CATokenCallerSession struct {
	Contract *CATokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// CATokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CATokenTransactorSession struct {
	Contract     *CATokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// CATokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type CATokenRaw struct {
	Contract *CAToken // Generic contract binding to access the raw methods on
}

// CATokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CATokenCallerRaw struct {
	Contract *CATokenCaller // Generic read-only contract binding to access the raw methods on
}

// CATokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CATokenTransactorRaw struct {
	Contract *CATokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCAToken creates a new instance of CAToken, bound to a specific deployed contract.
func NewCAToken(address common.Address, backend bind.ContractBackend) (*CAToken, error) {
	contract, err := bindCAToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CAToken{CATokenCaller: CATokenCaller{contract: contract}, CATokenTransactor: CATokenTransactor{contract: contract}, CATokenFilterer: CATokenFilterer{contract: contract}}, nil
}

// NewCATokenCaller creates a new read-only instance of CAToken, bound to a specific deployed contract.
func NewCATokenCaller(address common.Address, caller bind.ContractCaller) (*CATokenCaller, error) {
	contract, err := bindCAToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CATokenCaller{contract: contract}, nil
}

// NewCATokenTransactor creates a new write-only instance of CAToken, bound to a specific deployed contract.
func NewCATokenTransactor(address common.Address, transactor bind.ContractTransactor) (*CATokenTransactor, error) {
	contract, err := bindCAToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CATokenTransactor{contract: contract}, nil
}

// NewCATokenFilterer creates a new log filterer instance of CAToken, bound to a specific deployed contract.
func NewCATokenFilterer(address common.Address, filterer bind.ContractFilterer) (*CATokenFilterer, error) {
	contract, err := bindCAToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CATokenFilterer{contract: contract}, nil
}

// bindCAToken binds a generic wrapper to an already deployed contract.
func bindCAToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CATokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CAToken *CATokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CAToken.Contract.CATokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CAToken *CATokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.Contract.CATokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CAToken *CATokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CAToken.Contract.CATokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CAToken *CATokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CAToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CAToken *CATokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CAToken *CATokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CAToken.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CAToken *CATokenCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CAToken *CATokenSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CAToken.Contract.DEFAULTADMINROLE(&_CAToken.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CAToken *CATokenCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CAToken.Contract.DEFAULTADMINROLE(&_CAToken.CallOpts)
}

// SERVERROLE is a free data retrieval call binding the contract method 0x18cf2834.
//
// Solidity: function SERVER_ROLE() view returns(bytes32)
func (_CAToken *CATokenCaller) SERVERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "SERVER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SERVERROLE is a free data retrieval call binding the contract method 0x18cf2834.
//
// Solidity: function SERVER_ROLE() view returns(bytes32)
func (_CAToken *CATokenSession) SERVERROLE() ([32]byte, error) {
	return _CAToken.Contract.SERVERROLE(&_CAToken.CallOpts)
}

// SERVERROLE is a free data retrieval call binding the contract method 0x18cf2834.
//
// Solidity: function SERVER_ROLE() view returns(bytes32)
func (_CAToken *CATokenCallerSession) SERVERROLE() ([32]byte, error) {
	return _CAToken.Contract.SERVERROLE(&_CAToken.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CAToken *CATokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CAToken *CATokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CAToken.Contract.BalanceOf(&_CAToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CAToken *CATokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CAToken.Contract.BalanceOf(&_CAToken.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CAToken *CATokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetApproved(&_CAToken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetApproved(&_CAToken.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CAToken *CATokenCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CAToken *CATokenSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CAToken.Contract.GetRoleAdmin(&_CAToken.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CAToken *CATokenCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CAToken.Contract.GetRoleAdmin(&_CAToken.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CAToken *CATokenCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CAToken *CATokenSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetRoleMember(&_CAToken.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CAToken *CATokenCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetRoleMember(&_CAToken.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CAToken *CATokenCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CAToken *CATokenSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CAToken.Contract.GetRoleMemberCount(&_CAToken.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CAToken *CATokenCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CAToken.Contract.GetRoleMemberCount(&_CAToken.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CAToken *CATokenCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CAToken *CATokenSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CAToken.Contract.HasRole(&_CAToken.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CAToken *CATokenCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CAToken.Contract.HasRole(&_CAToken.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CAToken *CATokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CAToken *CATokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CAToken.Contract.IsApprovedForAll(&_CAToken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CAToken *CATokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CAToken.Contract.IsApprovedForAll(&_CAToken.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CAToken *CATokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CAToken *CATokenSession) Name() (string, error) {
	return _CAToken.Contract.Name(&_CAToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CAToken *CATokenCallerSession) Name() (string, error) {
	return _CAToken.Contract.Name(&_CAToken.CallOpts)
}

// NextNonce is a free data retrieval call binding the contract method 0xd69c3d30.
//
// Solidity: function nextNonce() view returns(uint256 _value)
func (_CAToken *CATokenCaller) NextNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "nextNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextNonce is a free data retrieval call binding the contract method 0xd69c3d30.
//
// Solidity: function nextNonce() view returns(uint256 _value)
func (_CAToken *CATokenSession) NextNonce() (*big.Int, error) {
	return _CAToken.Contract.NextNonce(&_CAToken.CallOpts)
}

// NextNonce is a free data retrieval call binding the contract method 0xd69c3d30.
//
// Solidity: function nextNonce() view returns(uint256 _value)
func (_CAToken *CATokenCallerSession) NextNonce() (*big.Int, error) {
	return _CAToken.Contract.NextNonce(&_CAToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CAToken *CATokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CAToken *CATokenSession) Owner() (common.Address, error) {
	return _CAToken.Contract.Owner(&_CAToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CAToken *CATokenCallerSession) Owner() (common.Address, error) {
	return _CAToken.Contract.Owner(&_CAToken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CAToken *CATokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.OwnerOf(&_CAToken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.OwnerOf(&_CAToken.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CAToken *CATokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CAToken *CATokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CAToken.Contract.SupportsInterface(&_CAToken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CAToken *CATokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CAToken.Contract.SupportsInterface(&_CAToken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CAToken *CATokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CAToken *CATokenSession) Symbol() (string, error) {
	return _CAToken.Contract.Symbol(&_CAToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CAToken *CATokenCallerSession) Symbol() (string, error) {
	return _CAToken.Contract.Symbol(&_CAToken.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CAToken *CATokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CAToken *CATokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CAToken.Contract.TokenURI(&_CAToken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CAToken *CATokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CAToken.Contract.TokenURI(&_CAToken.CallOpts, tokenId)
}

// UsedNonce is a free data retrieval call binding the contract method 0x9723fb6d.
//
// Solidity: function usedNonce(uint256 ) view returns(bool)
func (_CAToken *CATokenCaller) UsedNonce(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "usedNonce", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// UsedNonce is a free data retrieval call binding the contract method 0x9723fb6d.
//
// Solidity: function usedNonce(uint256 ) view returns(bool)
func (_CAToken *CATokenSession) UsedNonce(arg0 *big.Int) (bool, error) {
	return _CAToken.Contract.UsedNonce(&_CAToken.CallOpts, arg0)
}

// UsedNonce is a free data retrieval call binding the contract method 0x9723fb6d.
//
// Solidity: function usedNonce(uint256 ) view returns(bool)
func (_CAToken *CATokenCallerSession) UsedNonce(arg0 *big.Int) (bool, error) {
	return _CAToken.Contract.UsedNonce(&_CAToken.CallOpts, arg0)
}

// AddServerRole is a paid mutator transaction binding the contract method 0x7dbc690f.
//
// Solidity: function addServerRole(address _serverAddress) returns()
func (_CAToken *CATokenTransactor) AddServerRole(opts *bind.TransactOpts, _serverAddress common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "addServerRole", _serverAddress)
}

// AddServerRole is a paid mutator transaction binding the contract method 0x7dbc690f.
//
// Solidity: function addServerRole(address _serverAddress) returns()
func (_CAToken *CATokenSession) AddServerRole(_serverAddress common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.AddServerRole(&_CAToken.TransactOpts, _serverAddress)
}

// AddServerRole is a paid mutator transaction binding the contract method 0x7dbc690f.
//
// Solidity: function addServerRole(address _serverAddress) returns()
func (_CAToken *CATokenTransactorSession) AddServerRole(_serverAddress common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.AddServerRole(&_CAToken.TransactOpts, _serverAddress)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CAToken *CATokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Approve(&_CAToken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Approve(&_CAToken.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_CAToken *CATokenSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Burn(&_CAToken.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Burn(&_CAToken.TransactOpts, tokenId)
}

// ExpiredContracts is a paid mutator transaction binding the contract method 0x9aa94b2c.
//
// Solidity: function expiredContracts(uint256[] deleteIds) returns()
func (_CAToken *CATokenTransactor) ExpiredContracts(opts *bind.TransactOpts, deleteIds []*big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "expiredContracts", deleteIds)
}

// ExpiredContracts is a paid mutator transaction binding the contract method 0x9aa94b2c.
//
// Solidity: function expiredContracts(uint256[] deleteIds) returns()
func (_CAToken *CATokenSession) ExpiredContracts(deleteIds []*big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.ExpiredContracts(&_CAToken.TransactOpts, deleteIds)
}

// ExpiredContracts is a paid mutator transaction binding the contract method 0x9aa94b2c.
//
// Solidity: function expiredContracts(uint256[] deleteIds) returns()
func (_CAToken *CATokenTransactorSession) ExpiredContracts(deleteIds []*big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.ExpiredContracts(&_CAToken.TransactOpts, deleteIds)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CAToken *CATokenSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.GrantRole(&_CAToken.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.GrantRole(&_CAToken.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _nonce) returns()
func (_CAToken *CATokenTransactor) Mint(opts *bind.TransactOpts, _to common.Address, _nonce *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "mint", _to, _nonce)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _nonce) returns()
func (_CAToken *CATokenSession) Mint(_to common.Address, _nonce *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Mint(&_CAToken.TransactOpts, _to, _nonce)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _nonce) returns()
func (_CAToken *CATokenTransactorSession) Mint(_to common.Address, _nonce *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Mint(&_CAToken.TransactOpts, _to, _nonce)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CAToken *CATokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CAToken *CATokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _CAToken.Contract.RenounceOwnership(&_CAToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CAToken *CATokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CAToken.Contract.RenounceOwnership(&_CAToken.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CAToken *CATokenSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RenounceRole(&_CAToken.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RenounceRole(&_CAToken.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CAToken *CATokenSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RevokeRole(&_CAToken.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RevokeRole(&_CAToken.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CAToken *CATokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CAToken *CATokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom0(&_CAToken.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CAToken *CATokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom0(&_CAToken.TransactOpts, from, to, tokenId, _data)
}

// SelfDedstruct is a paid mutator transaction binding the contract method 0xd6b8b9c9.
//
// Solidity: function selfDedstruct() returns()
func (_CAToken *CATokenTransactor) SelfDedstruct(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "selfDedstruct")
}

// SelfDedstruct is a paid mutator transaction binding the contract method 0xd6b8b9c9.
//
// Solidity: function selfDedstruct() returns()
func (_CAToken *CATokenSession) SelfDedstruct() (*types.Transaction, error) {
	return _CAToken.Contract.SelfDedstruct(&_CAToken.TransactOpts)
}

// SelfDedstruct is a paid mutator transaction binding the contract method 0xd6b8b9c9.
//
// Solidity: function selfDedstruct() returns()
func (_CAToken *CATokenTransactorSession) SelfDedstruct() (*types.Transaction, error) {
	return _CAToken.Contract.SelfDedstruct(&_CAToken.TransactOpts)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CAToken *CATokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CAToken *CATokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CAToken.Contract.SetApprovalForAll(&_CAToken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CAToken *CATokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CAToken.Contract.SetApprovalForAll(&_CAToken.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.TransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.TransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CAToken *CATokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CAToken *CATokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.TransferOwnership(&_CAToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CAToken *CATokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.TransferOwnership(&_CAToken.TransactOpts, newOwner)
}

// CATokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the CAToken contract.
type CATokenApprovalIterator struct {
	Event *CATokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenApproval represents a Approval event raised by the CAToken contract.
type CATokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CATokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CATokenApprovalIterator{contract: _CAToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CATokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenApproval)
				if err := _CAToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) ParseApproval(log types.Log) (*CATokenApproval, error) {
	event := new(CATokenApproval)
	if err := _CAToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the CAToken contract.
type CATokenApprovalForAllIterator struct {
	Event *CATokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenApprovalForAll represents a ApprovalForAll event raised by the CAToken contract.
type CATokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CAToken *CATokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CATokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CATokenApprovalForAllIterator{contract: _CAToken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CAToken *CATokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CATokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenApprovalForAll)
				if err := _CAToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CAToken *CATokenFilterer) ParseApprovalForAll(log types.Log) (*CATokenApprovalForAll, error) {
	event := new(CATokenApprovalForAll)
	if err := _CAToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenDeletedTokensIterator is returned from FilterDeletedTokens and is used to iterate over the raw logs and unpacked data for DeletedTokens events raised by the CAToken contract.
type CATokenDeletedTokensIterator struct {
	Event *CATokenDeletedTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenDeletedTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenDeletedTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenDeletedTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenDeletedTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenDeletedTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenDeletedTokens represents a DeletedTokens event raised by the CAToken contract.
type CATokenDeletedTokens struct {
	DeleteIds []*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDeletedTokens is a free log retrieval operation binding the contract event 0xf251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f.
//
// Solidity: event DeletedTokens(uint256[] indexed deleteIds)
func (_CAToken *CATokenFilterer) FilterDeletedTokens(opts *bind.FilterOpts, deleteIds [][]*big.Int) (*CATokenDeletedTokensIterator, error) {

	var deleteIdsRule []interface{}
	for _, deleteIdsItem := range deleteIds {
		deleteIdsRule = append(deleteIdsRule, deleteIdsItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "DeletedTokens", deleteIdsRule)
	if err != nil {
		return nil, err
	}
	return &CATokenDeletedTokensIterator{contract: _CAToken.contract, event: "DeletedTokens", logs: logs, sub: sub}, nil
}

// WatchDeletedTokens is a free log subscription operation binding the contract event 0xf251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f.
//
// Solidity: event DeletedTokens(uint256[] indexed deleteIds)
func (_CAToken *CATokenFilterer) WatchDeletedTokens(opts *bind.WatchOpts, sink chan<- *CATokenDeletedTokens, deleteIds [][]*big.Int) (event.Subscription, error) {

	var deleteIdsRule []interface{}
	for _, deleteIdsItem := range deleteIds {
		deleteIdsRule = append(deleteIdsRule, deleteIdsItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "DeletedTokens", deleteIdsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenDeletedTokens)
				if err := _CAToken.contract.UnpackLog(event, "DeletedTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeletedTokens is a log parse operation binding the contract event 0xf251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f.
//
// Solidity: event DeletedTokens(uint256[] indexed deleteIds)
func (_CAToken *CATokenFilterer) ParseDeletedTokens(log types.Log) (*CATokenDeletedTokens, error) {
	event := new(CATokenDeletedTokens)
	if err := _CAToken.contract.UnpackLog(event, "DeletedTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenMintedIterator is returned from FilterMinted and is used to iterate over the raw logs and unpacked data for Minted events raised by the CAToken contract.
type CATokenMintedIterator struct {
	Event *CATokenMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenMinted represents a Minted event raised by the CAToken contract.
type CATokenMinted struct {
	From    common.Address
	TokenID *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinted is a free log retrieval operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address indexed _from, uint256 indexed tokenID)
func (_CAToken *CATokenFilterer) FilterMinted(opts *bind.FilterOpts, _from []common.Address, tokenID []*big.Int) (*CATokenMintedIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "Minted", _fromRule, tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &CATokenMintedIterator{contract: _CAToken.contract, event: "Minted", logs: logs, sub: sub}, nil
}

// WatchMinted is a free log subscription operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address indexed _from, uint256 indexed tokenID)
func (_CAToken *CATokenFilterer) WatchMinted(opts *bind.WatchOpts, sink chan<- *CATokenMinted, _from []common.Address, tokenID []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "Minted", _fromRule, tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenMinted)
				if err := _CAToken.contract.UnpackLog(event, "Minted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinted is a log parse operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address indexed _from, uint256 indexed tokenID)
func (_CAToken *CATokenFilterer) ParseMinted(log types.Log) (*CATokenMinted, error) {
	event := new(CATokenMinted)
	if err := _CAToken.contract.UnpackLog(event, "Minted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CAToken contract.
type CATokenOwnershipTransferredIterator struct {
	Event *CATokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenOwnershipTransferred represents a OwnershipTransferred event raised by the CAToken contract.
type CATokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CAToken *CATokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CATokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CATokenOwnershipTransferredIterator{contract: _CAToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CAToken *CATokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CATokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenOwnershipTransferred)
				if err := _CAToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CAToken *CATokenFilterer) ParseOwnershipTransferred(log types.Log) (*CATokenOwnershipTransferred, error) {
	event := new(CATokenOwnershipTransferred)
	if err := _CAToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CAToken contract.
type CATokenRoleAdminChangedIterator struct {
	Event *CATokenRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenRoleAdminChanged represents a RoleAdminChanged event raised by the CAToken contract.
type CATokenRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CAToken *CATokenFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CATokenRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CATokenRoleAdminChangedIterator{contract: _CAToken.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CAToken *CATokenFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CATokenRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenRoleAdminChanged)
				if err := _CAToken.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CAToken *CATokenFilterer) ParseRoleAdminChanged(log types.Log) (*CATokenRoleAdminChanged, error) {
	event := new(CATokenRoleAdminChanged)
	if err := _CAToken.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CAToken contract.
type CATokenRoleGrantedIterator struct {
	Event *CATokenRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenRoleGranted represents a RoleGranted event raised by the CAToken contract.
type CATokenRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CATokenRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CATokenRoleGrantedIterator{contract: _CAToken.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CATokenRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenRoleGranted)
				if err := _CAToken.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) ParseRoleGranted(log types.Log) (*CATokenRoleGranted, error) {
	event := new(CATokenRoleGranted)
	if err := _CAToken.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CAToken contract.
type CATokenRoleRevokedIterator struct {
	Event *CATokenRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenRoleRevoked represents a RoleRevoked event raised by the CAToken contract.
type CATokenRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CATokenRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CATokenRoleRevokedIterator{contract: _CAToken.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CATokenRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenRoleRevoked)
				if err := _CAToken.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) ParseRoleRevoked(log types.Log) (*CATokenRoleRevoked, error) {
	event := new(CATokenRoleRevoked)
	if err := _CAToken.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the CAToken contract.
type CATokenTransferIterator struct {
	Event *CATokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenTransfer represents a Transfer event raised by the CAToken contract.
type CATokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CATokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CATokenTransferIterator{contract: _CAToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CATokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenTransfer)
				if err := _CAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) ParseTransfer(log types.Log) (*CATokenTransfer, error) {
	event := new(CATokenTransfer)
	if err := _CAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
