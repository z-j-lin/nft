// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CAToken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CATokenMetaData contains all meta data concerning the CAToken contract.
var CATokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_server\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"deleteIds\",\"type\":\"uint256[]\"}],\"name\":\"DeletedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serverAddress\",\"type\":\"address\"}],\"name\":\"addServerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"deleteIds\",\"type\":\"uint256[]\"}],\"name\":\"expiredContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfDedstruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162004bf238038062004bf28339818101604052810190620000379190620005d0565b82828160009080519060200190620000519291906200048b565b5080600190805190602001906200006a9291906200048b565b5050506200008d620000816200012d60201b60201c565b6200013560201b60201c565b620000b16000801b620000a56200012d60201b60201c565b620001fb60201b60201c565b620000e37fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc7782620001fb60201b60201c565b620001247fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc77620001186200012d60201b60201c565b620001fb60201b60201c565b5050506200083c565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200021282826200024360201b6200147a1760201c565b6200023e81600760008581526020019081526020016000206200025960201b620014881790919060201c565b505050565b6200025582826200029160201b60201c565b5050565b600062000289836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200038360201b60201c565b905092915050565b620002a38282620003fd60201b60201c565b6200037f5760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620003246200012d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006200039783836200046860201b60201c565b620003f2578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050620003f7565b600090505b92915050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b828054620004999062000733565b90600052602060002090601f016020900481019282620004bd576000855562000509565b82601f10620004d857805160ff191683800117855562000509565b8280016001018555821562000509579182015b8281111562000508578251825591602001919060010190620004eb565b5b5090506200051891906200051c565b5090565b5b80821115620005375760008160009055506001016200051d565b5090565b6000620005526200054c8462000693565b6200066a565b90508281526020810184848401111562000571576200057062000802565b5b6200057e848285620006fd565b509392505050565b600081519050620005978162000822565b92915050565b600082601f830112620005b557620005b4620007fd565b5b8151620005c78482602086016200053b565b91505092915050565b600080600060608486031215620005ec57620005eb6200080c565b5b600084015167ffffffffffffffff8111156200060d576200060c62000807565b5b6200061b868287016200059d565b935050602084015167ffffffffffffffff8111156200063f576200063e62000807565b5b6200064d868287016200059d565b9250506040620006608682870162000586565b9150509250925092565b60006200067662000689565b905062000684828262000769565b919050565b6000604051905090565b600067ffffffffffffffff821115620006b157620006b0620007ce565b5b620006bc8262000811565b9050602081019050919050565b6000620006d682620006dd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200071d57808201518184015260208101905062000700565b838111156200072d576000848401525b50505050565b600060028204905060018216806200074c57607f821691505b602082108114156200076357620007626200079f565b5b50919050565b620007748262000811565b810181811067ffffffffffffffff82111715620007965762000795620007ce565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200082d81620006c9565b81146200083957600080fd5b50565b6143a6806200084c6000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80637dbc690f11610104578063a22cb465116100a2578063d547741f11610071578063d547741f14610563578063d6b8b9c91461057f578063e985e9c514610589578063f2fde38b146105b9576101da565b8063a22cb465146104cb578063b88d4fde146104e7578063c87b56dd14610503578063ca15c87314610533576101da565b806391d14854116100de57806391d148541461044357806395d89b41146104735780639aa94b2c14610491578063a217fddf146104ad576101da565b80637dbc690f146103d95780638da5cb5b146103f55780639010d07c14610413576101da565b80632f2ff15d1161017c5780636352211e1161014b5780636352211e146103535780636a6278421461038357806370a082311461039f578063715018a6146103cf576101da565b80632f2ff15d146102e357806336568abe146102ff57806342842e0e1461031b57806342966c6814610337576101da565b8063095ea7b3116101b8578063095ea7b31461025d57806318cf28341461027957806323b872dd14610297578063248a9ca3146102b3576101da565b806301ffc9a7146101df57806306fdde031461020f578063081812fc1461022d575b600080fd5b6101f960048036038101906101f49190612ed7565b6105d5565b60405161020691906134c3565b60405180910390f35b6102176105e7565b60405161022491906134f9565b60405180910390f35b61024760048036038101906102429190612f31565b610679565b604051610254919061345c565b60405180910390f35b61027760048036038101906102729190612da1565b6106fe565b005b610281610816565b60405161028e91906134de565b60405180910390f35b6102b160048036038101906102ac9190612c8b565b61083a565b005b6102cd60048036038101906102c89190612e2a565b61089a565b6040516102da91906134de565b60405180910390f35b6102fd60048036038101906102f89190612e57565b6108ba565b005b61031960048036038101906103149190612e57565b6108ee565b005b61033560048036038101906103309190612c8b565b610922565b005b610351600480360381019061034c9190612f31565b610942565b005b61036d60048036038101906103689190612f31565b61099e565b60405161037a919061345c565b60405180910390f35b61039d60048036038101906103989190612c1e565b610a50565b005b6103b960048036038101906103b49190612c1e565b610b2d565b6040516103c691906137bb565b60405180910390f35b6103d7610be5565b005b6103f360048036038101906103ee9190612c1e565b610c6d565b005b6103fd610d16565b60405161040a919061345c565b60405180910390f35b61042d60048036038101906104289190612e97565b610d40565b60405161043a919061345c565b60405180910390f35b61045d60048036038101906104589190612e57565b610d6f565b60405161046a91906134c3565b60405180910390f35b61047b610dda565b60405161048891906134f9565b60405180910390f35b6104ab60048036038101906104a69190612de1565b610e6c565b005b6104b5610f64565b6040516104c291906134de565b60405180910390f35b6104e560048036038101906104e09190612d61565b610f6b565b005b61050160048036038101906104fc9190612cde565b6110ec565b005b61051d60048036038101906105189190612f31565b61114e565b60405161052a91906134f9565b60405180910390f35b61054d60048036038101906105489190612e2a565b6111f5565b60405161055a91906137bb565b60405180910390f35b61057d60048036038101906105789190612e57565b611219565b005b61058761124d565b005b6105a3600480360381019061059e9190612c4b565b6112ee565b6040516105b091906134c3565b60405180910390f35b6105d360048036038101906105ce9190612c1e565b611382565b005b60006105e0826114b8565b9050919050565b6060600080546105f690613acd565b80601f016020809104026020016040519081016040528092919081815260200182805461062290613acd565b801561066f5780601f106106445761010080835404028352916020019161066f565b820191906000526020600020905b81548152906001019060200180831161065257829003601f168201915b5050505050905090565b600061068482611532565b6106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba9061369b565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107098261099e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561077a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107719061373b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661079961159e565b73ffffffffffffffffffffffffffffffffffffffff1614806107c857506107c7816107c261159e565b6112ee565b5b610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe9061361b565b60405180910390fd5b61081183836115a6565b505050565b7fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc7781565b61084b61084561159e565b8261165f565b61088a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108819061375b565b60405180910390fd5b61089583838361173d565b505050565b600060066000838152602001908152602001600020600101549050919050565b6108c48282611999565b6108e9816007600085815260200190815260200160002061148890919063ffffffff16565b505050565b6108f882826119c2565b61091d8160076000858152602001908152602001600020611a4590919063ffffffff16565b505050565b61093d838383604051806020016040528060008152506110ec565b505050565b61095361094d61159e565b8261165f565b610992576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109899061377b565b60405180910390fd5b61099b81611a75565b50565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3e9061365b565b60405180910390fd5b80915050919050565b610a817fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc77610a7c61159e565b610d6f565b610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab79061351b565b60405180910390fd5b610ad381610ace6009611b86565b611b94565b610add6009611b86565b8173ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe60405160405180910390a3610b2a6009611d62565b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b959061363b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610bed61159e565b73ffffffffffffffffffffffffffffffffffffffff16610c0b610d16565b73ffffffffffffffffffffffffffffffffffffffff1614610c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c58906136bb565b60405180910390fd5b610c6b6000611d78565b565b610c7561159e565b73ffffffffffffffffffffffffffffffffffffffff16610c93610d16565b73ffffffffffffffffffffffffffffffffffffffff1614610ce9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce0906136bb565b60405180910390fd5b610d137fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc7782611e3e565b50565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610d678260076000868152602001908152602001600020611e7290919063ffffffff16565b905092915050565b60006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060018054610de990613acd565b80601f0160208091040260200160405190810160405280929190818152602001828054610e1590613acd565b8015610e625780601f10610e3757610100808354040283529160200191610e62565b820191906000526020600020905b815481529060010190602001808311610e4557829003601f168201915b5050505050905090565b610e9d7fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc77610e9861159e565b610d6f565b610edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed3906136db565b60405180910390fd5b60005b8151811015610f1e57610f0b828281518110610efe57610efd613c66565b5b6020026020010151611a75565b8080610f1690613b30565b915050610edf565b5080604051610f2d91906133e7565b60405180910390207ff251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f60405160405180910390a250565b6000801b81565b610f7361159e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd8906135db565b60405180910390fd5b8060056000610fee61159e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661109b61159e565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110e091906134c3565b60405180910390a35050565b6110fd6110f761159e565b8361165f565b61113c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111339061375b565b60405180910390fd5b61114884848484611e8c565b50505050565b606061115982611532565b611198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118f9061371b565b60405180910390fd5b60006111a2611ee8565b905060008151116111c257604051806020016040528060008152506111ed565b806111cc84611eff565b6040516020016111dd9291906133fe565b6040516020818303038152906040525b915050919050565b600061121260076000848152602001908152602001600020612060565b9050919050565b6112238282612075565b6112488160076000858152602001908152602001600020611a4590919063ffffffff16565b505050565b61125561159e565b73ffffffffffffffffffffffffffffffffffffffff16611273610d16565b73ffffffffffffffffffffffffffffffffffffffff16146112c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c0906136bb565b60405180910390fd5b60006112d3610d16565b90508073ffffffffffffffffffffffffffffffffffffffff16ff5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61138a61159e565b73ffffffffffffffffffffffffffffffffffffffff166113a8610d16565b73ffffffffffffffffffffffffffffffffffffffff16146113fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f5906136bb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561146e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114659061357b565b60405180910390fd5b61147781611d78565b50565b611484828261209e565b5050565b60006114b0836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61217f565b905092915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061152b575061152a826121ef565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166116198361099e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061166a82611532565b6116a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a0906135fb565b60405180910390fd5b60006116b48361099e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061172357508373ffffffffffffffffffffffffffffffffffffffff1661170b84610679565b73ffffffffffffffffffffffffffffffffffffffff16145b80611734575061173381856112ee565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661175d8261099e565b73ffffffffffffffffffffffffffffffffffffffff16146117b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117aa906136fb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611823576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181a906135bb565b60405180910390fd5b61182e838383612269565b6118396000826115a6565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461188991906139af565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118e091906138ce565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6119a28261089a565b6119b3816119ae61159e565b61226e565b6119bd838361209e565b505050565b6119ca61159e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2e9061379b565b60405180910390fd5b611a41828261230b565b5050565b6000611a6d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6123ed565b905092915050565b6000611a808261099e565b9050611a8e81600084612269565b611a996000836115a6565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ae991906139af565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611c04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bfb9061367b565b60405180910390fd5b611c0d81611532565b15611c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c449061359b565b60405180910390fd5b611c5960008383612269565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ca991906138ce565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6001816000016000828254019250508190555050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611e48828261147a565b611e6d816007600085815260200190815260200160002061148890919063ffffffff16565b505050565b6000611e818360000183612501565b60001c905092915050565b611e9784848461173d565b611ea38484848461252c565b611ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed99061355b565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415611f47576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061205b565b600082905060005b60008214611f79578080611f6290613b30565b915050600a82611f729190613924565b9150611f4f565b60008167ffffffffffffffff811115611f9557611f94613c95565b5b6040519080825280601f01601f191660200182016040528015611fc75781602001600182028036833780820191505090505b5090505b6000851461205457600182611fe091906139af565b9150600a85611fef9190613b79565b6030611ffb91906138ce565b60f81b81838151811061201157612010613c66565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561204d9190613924565b9450611fcb565b8093505050505b919050565b600061206e826000016126c3565b9050919050565b61207e8261089a565b61208f8161208a61159e565b61226e565b612099838361230b565b505050565b6120a88282610d6f565b61217b5760016006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061212061159e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600061218b83836126d4565b6121e45782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506121e9565b600090505b92915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806122625750612261826126f7565b5b9050919050565b505050565b6122788282610d6f565b6123075761229d8173ffffffffffffffffffffffffffffffffffffffff1660146127d9565b6122ab8360001c60206127d9565b6040516020016122bc929190613422565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fe91906134f9565b60405180910390fd5b5050565b6123158282610d6f565b156123e95760006006600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061238e61159e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600080836001016000848152602001908152602001600020549050600081146124f557600060018261241f91906139af565b905060006001866000018054905061243791906139af565b90508181146124a657600086600001828154811061245857612457613c66565b5b906000526020600020015490508087600001848154811061247c5761247b613c66565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806124ba576124b9613c37565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506124fb565b60009150505b92915050565b600082600001828154811061251957612518613c66565b5b9060005260206000200154905092915050565b600061254d8473ffffffffffffffffffffffffffffffffffffffff16612a15565b156126b6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261257661159e565b8786866040518563ffffffff1660e01b81526004016125989493929190613477565b602060405180830381600087803b1580156125b257600080fd5b505af19250505080156125e357506040513d601f19601f820116820180604052508101906125e09190612f04565b60015b612666573d8060008114612613576040519150601f19603f3d011682016040523d82523d6000602084013e612618565b606091505b5060008151141561265e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126559061355b565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506126bb565b600190505b949350505050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806127c257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806127d257506127d182612a28565b5b9050919050565b6060600060028360026127ec9190613955565b6127f691906138ce565b67ffffffffffffffff81111561280f5761280e613c95565b5b6040519080825280601f01601f1916602001820160405280156128415781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061287957612878613c66565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106128dd576128dc613c66565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600184600261291d9190613955565b61292791906138ce565b90505b60018111156129c7577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061296957612968613c66565b5b1a60f81b8282815181106129805761297f613c66565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806129c090613aa3565b905061292a565b5060008414612a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a029061353b565b60405180910390fd5b8091505092915050565b600080823b905060008111915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000612aa5612aa0846137fb565b6137d6565b90508083825260208201905082856020860282011115612ac857612ac7613cc9565b5b60005b85811015612af85781612ade8882612c09565b845260208401935060208301925050600181019050612acb565b5050509392505050565b6000612b15612b1084613827565b6137d6565b905082815260208101848484011115612b3157612b30613cce565b5b612b3c848285613a61565b509392505050565b600081359050612b53816142fd565b92915050565b600082601f830112612b6e57612b6d613cc4565b5b8135612b7e848260208601612a92565b91505092915050565b600081359050612b9681614314565b92915050565b600081359050612bab8161432b565b92915050565b600081359050612bc081614342565b92915050565b600081519050612bd581614342565b92915050565b600082601f830112612bf057612bef613cc4565b5b8135612c00848260208601612b02565b91505092915050565b600081359050612c1881614359565b92915050565b600060208284031215612c3457612c33613cd8565b5b6000612c4284828501612b44565b91505092915050565b60008060408385031215612c6257612c61613cd8565b5b6000612c7085828601612b44565b9250506020612c8185828601612b44565b9150509250929050565b600080600060608486031215612ca457612ca3613cd8565b5b6000612cb286828701612b44565b9350506020612cc386828701612b44565b9250506040612cd486828701612c09565b9150509250925092565b60008060008060808587031215612cf857612cf7613cd8565b5b6000612d0687828801612b44565b9450506020612d1787828801612b44565b9350506040612d2887828801612c09565b925050606085013567ffffffffffffffff811115612d4957612d48613cd3565b5b612d5587828801612bdb565b91505092959194509250565b60008060408385031215612d7857612d77613cd8565b5b6000612d8685828601612b44565b9250506020612d9785828601612b87565b9150509250929050565b60008060408385031215612db857612db7613cd8565b5b6000612dc685828601612b44565b9250506020612dd785828601612c09565b9150509250929050565b600060208284031215612df757612df6613cd8565b5b600082013567ffffffffffffffff811115612e1557612e14613cd3565b5b612e2184828501612b59565b91505092915050565b600060208284031215612e4057612e3f613cd8565b5b6000612e4e84828501612b9c565b91505092915050565b60008060408385031215612e6e57612e6d613cd8565b5b6000612e7c85828601612b9c565b9250506020612e8d85828601612b44565b9150509250929050565b60008060408385031215612eae57612ead613cd8565b5b6000612ebc85828601612b9c565b9250506020612ecd85828601612c09565b9150509250929050565b600060208284031215612eed57612eec613cd8565b5b6000612efb84828501612bb1565b91505092915050565b600060208284031215612f1a57612f19613cd8565b5b6000612f2884828501612bc6565b91505092915050565b600060208284031215612f4757612f46613cd8565b5b6000612f5584828501612c09565b91505092915050565b6000612f6a83836133d8565b60208301905092915050565b612f7f816139e3565b82525050565b6000612f9082613868565b612f9a8185613896565b9350612fa583613858565b8060005b83811015612fd6578151612fbd8882612f5e565b9750612fc883613889565b925050600181019050612fa9565b5085935050505092915050565b612fec816139f5565b82525050565b612ffb81613a01565b82525050565b600061300c82613873565b61301681856138a1565b9350613026818560208601613a70565b61302f81613cdd565b840191505092915050565b60006130458261387e565b61304f81856138b2565b935061305f818560208601613a70565b61306881613cdd565b840191505092915050565b600061307e8261387e565b61308881856138c3565b9350613098818560208601613a70565b80840191505092915050565b60006130b1602d836138b2565b91506130bc82613cee565b604082019050919050565b60006130d46020836138b2565b91506130df82613d3d565b602082019050919050565b60006130f76032836138b2565b915061310282613d66565b604082019050919050565b600061311a6026836138b2565b915061312582613db5565b604082019050919050565b600061313d601c836138b2565b915061314882613e04565b602082019050919050565b60006131606024836138b2565b915061316b82613e2d565b604082019050919050565b60006131836019836138b2565b915061318e82613e7c565b602082019050919050565b60006131a6602c836138b2565b91506131b182613ea5565b604082019050919050565b60006131c96038836138b2565b91506131d482613ef4565b604082019050919050565b60006131ec602a836138b2565b91506131f782613f43565b604082019050919050565b600061320f6029836138b2565b915061321a82613f92565b604082019050919050565b60006132326020836138b2565b915061323d82613fe1565b602082019050919050565b6000613255602c836138b2565b91506132608261400a565b604082019050919050565b60006132786020836138b2565b915061328382614059565b602082019050919050565b600061329b602e836138b2565b91506132a682614082565b604082019050919050565b60006132be6029836138b2565b91506132c9826140d1565b604082019050919050565b60006132e1602f836138b2565b91506132ec82614120565b604082019050919050565b60006133046021836138b2565b915061330f8261416f565b604082019050919050565b60006133276031836138b2565b9150613332826141be565b604082019050919050565b600061334a6017836138c3565b91506133558261420d565b601782019050919050565b600061336d6030836138b2565b915061337882614236565b604082019050919050565b60006133906011836138c3565b915061339b82614285565b601182019050919050565b60006133b3602f836138b2565b91506133be826142ae565b604082019050919050565b6133d281613a57565b82525050565b6133e181613a57565b82525050565b60006133f38284612f85565b915081905092915050565b600061340a8285613073565b91506134168284613073565b91508190509392505050565b600061342d8261333d565b91506134398285613073565b915061344482613383565b91506134508284613073565b91508190509392505050565b60006020820190506134716000830184612f76565b92915050565b600060808201905061348c6000830187612f76565b6134996020830186612f76565b6134a660408301856133c9565b81810360608301526134b88184613001565b905095945050505050565b60006020820190506134d86000830184612fe3565b92915050565b60006020820190506134f36000830184612ff2565b92915050565b60006020820190508181036000830152613513818461303a565b905092915050565b60006020820190508181036000830152613534816130a4565b9050919050565b60006020820190508181036000830152613554816130c7565b9050919050565b60006020820190508181036000830152613574816130ea565b9050919050565b600060208201905081810360008301526135948161310d565b9050919050565b600060208201905081810360008301526135b481613130565b9050919050565b600060208201905081810360008301526135d481613153565b9050919050565b600060208201905081810360008301526135f481613176565b9050919050565b6000602082019050818103600083015261361481613199565b9050919050565b60006020820190508181036000830152613634816131bc565b9050919050565b60006020820190508181036000830152613654816131df565b9050919050565b6000602082019050818103600083015261367481613202565b9050919050565b6000602082019050818103600083015261369481613225565b9050919050565b600060208201905081810360008301526136b481613248565b9050919050565b600060208201905081810360008301526136d48161326b565b9050919050565b600060208201905081810360008301526136f48161328e565b9050919050565b60006020820190508181036000830152613714816132b1565b9050919050565b60006020820190508181036000830152613734816132d4565b9050919050565b60006020820190508181036000830152613754816132f7565b9050919050565b600060208201905081810360008301526137748161331a565b9050919050565b6000602082019050818103600083015261379481613360565b9050919050565b600060208201905081810360008301526137b4816133a6565b9050919050565b60006020820190506137d060008301846133c9565b92915050565b60006137e06137f1565b90506137ec8282613aff565b919050565b6000604051905090565b600067ffffffffffffffff82111561381657613815613c95565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561384257613841613c95565b5b61384b82613cdd565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006138d982613a57565b91506138e483613a57565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561391957613918613baa565b5b828201905092915050565b600061392f82613a57565b915061393a83613a57565b92508261394a57613949613bd9565b5b828204905092915050565b600061396082613a57565b915061396b83613a57565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156139a4576139a3613baa565b5b828202905092915050565b60006139ba82613a57565b91506139c583613a57565b9250828210156139d8576139d7613baa565b5b828203905092915050565b60006139ee82613a37565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613a8e578082015181840152602081019050613a73565b83811115613a9d576000848401525b50505050565b6000613aae82613a57565b91506000821415613ac257613ac1613baa565b5b600182039050919050565b60006002820490506001821680613ae557607f821691505b60208210811415613af957613af8613c08565b5b50919050565b613b0882613cdd565b810181811067ffffffffffffffff82111715613b2757613b26613c95565b5b80604052505050565b6000613b3b82613a57565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b6e57613b6d613baa565b5b600182019050919050565b6000613b8482613a57565b9150613b8f83613a57565b925082613b9f57613b9e613bd9565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f796f7520646f6e277420686176652061636365737320746f20746865206d696e60008201527f74696e672066756e6374696f6e00000000000000000000000000000000000000602082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f746869732069732061776b776172642c20796f75277265206e6f7420616c6c6f60008201527f77656420746f20646f2074686174000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656400000000000000000000000000000000602082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b614306816139e3565b811461431157600080fd5b50565b61431d816139f5565b811461432857600080fd5b50565b61433481613a01565b811461433f57600080fd5b50565b61434b81613a0b565b811461435657600080fd5b50565b61436281613a57565b811461436d57600080fd5b5056fea2646970667358221220b96b54daaf3b57edd5d5d906d679205de0f7e8c087e0551f4a03cba12441d4b364736f6c63430008070033",
}

// CATokenABI is the input ABI used to generate the binding from.
// Deprecated: Use CATokenMetaData.ABI instead.
var CATokenABI = CATokenMetaData.ABI

// CATokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CATokenMetaData.Bin instead.
var CATokenBin = CATokenMetaData.Bin

// DeployCAToken deploys a new Ethereum contract, binding an instance of CAToken to it.
func DeployCAToken(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, _server common.Address) (common.Address, *types.Transaction, *CAToken, error) {
	parsed, err := CATokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CATokenBin), backend, name, symbol, _server)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CAToken{CATokenCaller: CATokenCaller{contract: contract}, CATokenTransactor: CATokenTransactor{contract: contract}, CATokenFilterer: CATokenFilterer{contract: contract}}, nil
}

// CAToken is an auto generated Go binding around an Ethereum contract.
type CAToken struct {
	CATokenCaller     // Read-only binding to the contract
	CATokenTransactor // Write-only binding to the contract
	CATokenFilterer   // Log filterer for contract events
}

// CATokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type CATokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CATokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CATokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CATokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CATokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CATokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CATokenSession struct {
	Contract     *CAToken          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CATokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CATokenCallerSession struct {
	Contract *CATokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// CATokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CATokenTransactorSession struct {
	Contract     *CATokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// CATokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type CATokenRaw struct {
	Contract *CAToken // Generic contract binding to access the raw methods on
}

// CATokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CATokenCallerRaw struct {
	Contract *CATokenCaller // Generic read-only contract binding to access the raw methods on
}

// CATokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CATokenTransactorRaw struct {
	Contract *CATokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCAToken creates a new instance of CAToken, bound to a specific deployed contract.
func NewCAToken(address common.Address, backend bind.ContractBackend) (*CAToken, error) {
	contract, err := bindCAToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CAToken{CATokenCaller: CATokenCaller{contract: contract}, CATokenTransactor: CATokenTransactor{contract: contract}, CATokenFilterer: CATokenFilterer{contract: contract}}, nil
}

// NewCATokenCaller creates a new read-only instance of CAToken, bound to a specific deployed contract.
func NewCATokenCaller(address common.Address, caller bind.ContractCaller) (*CATokenCaller, error) {
	contract, err := bindCAToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CATokenCaller{contract: contract}, nil
}

// NewCATokenTransactor creates a new write-only instance of CAToken, bound to a specific deployed contract.
func NewCATokenTransactor(address common.Address, transactor bind.ContractTransactor) (*CATokenTransactor, error) {
	contract, err := bindCAToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CATokenTransactor{contract: contract}, nil
}

// NewCATokenFilterer creates a new log filterer instance of CAToken, bound to a specific deployed contract.
func NewCATokenFilterer(address common.Address, filterer bind.ContractFilterer) (*CATokenFilterer, error) {
	contract, err := bindCAToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CATokenFilterer{contract: contract}, nil
}

// bindCAToken binds a generic wrapper to an already deployed contract.
func bindCAToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CATokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CAToken *CATokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CAToken.Contract.CATokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CAToken *CATokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.Contract.CATokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CAToken *CATokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CAToken.Contract.CATokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CAToken *CATokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CAToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CAToken *CATokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CAToken *CATokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CAToken.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CAToken *CATokenCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CAToken *CATokenSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CAToken.Contract.DEFAULTADMINROLE(&_CAToken.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CAToken *CATokenCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CAToken.Contract.DEFAULTADMINROLE(&_CAToken.CallOpts)
}

// SERVERROLE is a free data retrieval call binding the contract method 0x18cf2834.
//
// Solidity: function SERVER_ROLE() view returns(bytes32)
func (_CAToken *CATokenCaller) SERVERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "SERVER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SERVERROLE is a free data retrieval call binding the contract method 0x18cf2834.
//
// Solidity: function SERVER_ROLE() view returns(bytes32)
func (_CAToken *CATokenSession) SERVERROLE() ([32]byte, error) {
	return _CAToken.Contract.SERVERROLE(&_CAToken.CallOpts)
}

// SERVERROLE is a free data retrieval call binding the contract method 0x18cf2834.
//
// Solidity: function SERVER_ROLE() view returns(bytes32)
func (_CAToken *CATokenCallerSession) SERVERROLE() ([32]byte, error) {
	return _CAToken.Contract.SERVERROLE(&_CAToken.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CAToken *CATokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CAToken *CATokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CAToken.Contract.BalanceOf(&_CAToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CAToken *CATokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CAToken.Contract.BalanceOf(&_CAToken.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CAToken *CATokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetApproved(&_CAToken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetApproved(&_CAToken.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CAToken *CATokenCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CAToken *CATokenSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CAToken.Contract.GetRoleAdmin(&_CAToken.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CAToken *CATokenCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CAToken.Contract.GetRoleAdmin(&_CAToken.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CAToken *CATokenCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CAToken *CATokenSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetRoleMember(&_CAToken.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CAToken *CATokenCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetRoleMember(&_CAToken.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CAToken *CATokenCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CAToken *CATokenSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CAToken.Contract.GetRoleMemberCount(&_CAToken.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CAToken *CATokenCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CAToken.Contract.GetRoleMemberCount(&_CAToken.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CAToken *CATokenCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CAToken *CATokenSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CAToken.Contract.HasRole(&_CAToken.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CAToken *CATokenCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CAToken.Contract.HasRole(&_CAToken.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CAToken *CATokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CAToken *CATokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CAToken.Contract.IsApprovedForAll(&_CAToken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CAToken *CATokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CAToken.Contract.IsApprovedForAll(&_CAToken.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CAToken *CATokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CAToken *CATokenSession) Name() (string, error) {
	return _CAToken.Contract.Name(&_CAToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CAToken *CATokenCallerSession) Name() (string, error) {
	return _CAToken.Contract.Name(&_CAToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CAToken *CATokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CAToken *CATokenSession) Owner() (common.Address, error) {
	return _CAToken.Contract.Owner(&_CAToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CAToken *CATokenCallerSession) Owner() (common.Address, error) {
	return _CAToken.Contract.Owner(&_CAToken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CAToken *CATokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.OwnerOf(&_CAToken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.OwnerOf(&_CAToken.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CAToken *CATokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CAToken *CATokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CAToken.Contract.SupportsInterface(&_CAToken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CAToken *CATokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CAToken.Contract.SupportsInterface(&_CAToken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CAToken *CATokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CAToken *CATokenSession) Symbol() (string, error) {
	return _CAToken.Contract.Symbol(&_CAToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CAToken *CATokenCallerSession) Symbol() (string, error) {
	return _CAToken.Contract.Symbol(&_CAToken.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CAToken *CATokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CAToken *CATokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CAToken.Contract.TokenURI(&_CAToken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CAToken *CATokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CAToken.Contract.TokenURI(&_CAToken.CallOpts, tokenId)
}

// AddServerRole is a paid mutator transaction binding the contract method 0x7dbc690f.
//
// Solidity: function addServerRole(address _serverAddress) returns()
func (_CAToken *CATokenTransactor) AddServerRole(opts *bind.TransactOpts, _serverAddress common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "addServerRole", _serverAddress)
}

// AddServerRole is a paid mutator transaction binding the contract method 0x7dbc690f.
//
// Solidity: function addServerRole(address _serverAddress) returns()
func (_CAToken *CATokenSession) AddServerRole(_serverAddress common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.AddServerRole(&_CAToken.TransactOpts, _serverAddress)
}

// AddServerRole is a paid mutator transaction binding the contract method 0x7dbc690f.
//
// Solidity: function addServerRole(address _serverAddress) returns()
func (_CAToken *CATokenTransactorSession) AddServerRole(_serverAddress common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.AddServerRole(&_CAToken.TransactOpts, _serverAddress)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CAToken *CATokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Approve(&_CAToken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Approve(&_CAToken.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_CAToken *CATokenSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Burn(&_CAToken.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Burn(&_CAToken.TransactOpts, tokenId)
}

// ExpiredContracts is a paid mutator transaction binding the contract method 0x9aa94b2c.
//
// Solidity: function expiredContracts(uint256[] deleteIds) returns()
func (_CAToken *CATokenTransactor) ExpiredContracts(opts *bind.TransactOpts, deleteIds []*big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "expiredContracts", deleteIds)
}

// ExpiredContracts is a paid mutator transaction binding the contract method 0x9aa94b2c.
//
// Solidity: function expiredContracts(uint256[] deleteIds) returns()
func (_CAToken *CATokenSession) ExpiredContracts(deleteIds []*big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.ExpiredContracts(&_CAToken.TransactOpts, deleteIds)
}

// ExpiredContracts is a paid mutator transaction binding the contract method 0x9aa94b2c.
//
// Solidity: function expiredContracts(uint256[] deleteIds) returns()
func (_CAToken *CATokenTransactorSession) ExpiredContracts(deleteIds []*big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.ExpiredContracts(&_CAToken.TransactOpts, deleteIds)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CAToken *CATokenSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.GrantRole(&_CAToken.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.GrantRole(&_CAToken.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address _to) returns()
func (_CAToken *CATokenTransactor) Mint(opts *bind.TransactOpts, _to common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "mint", _to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address _to) returns()
func (_CAToken *CATokenSession) Mint(_to common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.Mint(&_CAToken.TransactOpts, _to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address _to) returns()
func (_CAToken *CATokenTransactorSession) Mint(_to common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.Mint(&_CAToken.TransactOpts, _to)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CAToken *CATokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CAToken *CATokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _CAToken.Contract.RenounceOwnership(&_CAToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CAToken *CATokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CAToken.Contract.RenounceOwnership(&_CAToken.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CAToken *CATokenSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RenounceRole(&_CAToken.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RenounceRole(&_CAToken.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CAToken *CATokenSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RevokeRole(&_CAToken.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RevokeRole(&_CAToken.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CAToken *CATokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CAToken *CATokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom0(&_CAToken.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CAToken *CATokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom0(&_CAToken.TransactOpts, from, to, tokenId, _data)
}

// SelfDedstruct is a paid mutator transaction binding the contract method 0xd6b8b9c9.
//
// Solidity: function selfDedstruct() returns()
func (_CAToken *CATokenTransactor) SelfDedstruct(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "selfDedstruct")
}

// SelfDedstruct is a paid mutator transaction binding the contract method 0xd6b8b9c9.
//
// Solidity: function selfDedstruct() returns()
func (_CAToken *CATokenSession) SelfDedstruct() (*types.Transaction, error) {
	return _CAToken.Contract.SelfDedstruct(&_CAToken.TransactOpts)
}

// SelfDedstruct is a paid mutator transaction binding the contract method 0xd6b8b9c9.
//
// Solidity: function selfDedstruct() returns()
func (_CAToken *CATokenTransactorSession) SelfDedstruct() (*types.Transaction, error) {
	return _CAToken.Contract.SelfDedstruct(&_CAToken.TransactOpts)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CAToken *CATokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CAToken *CATokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CAToken.Contract.SetApprovalForAll(&_CAToken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CAToken *CATokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CAToken.Contract.SetApprovalForAll(&_CAToken.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.TransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.TransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CAToken *CATokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CAToken *CATokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.TransferOwnership(&_CAToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CAToken *CATokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.TransferOwnership(&_CAToken.TransactOpts, newOwner)
}

// CATokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the CAToken contract.
type CATokenApprovalIterator struct {
	Event *CATokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenApproval represents a Approval event raised by the CAToken contract.
type CATokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CATokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CATokenApprovalIterator{contract: _CAToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CATokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenApproval)
				if err := _CAToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) ParseApproval(log types.Log) (*CATokenApproval, error) {
	event := new(CATokenApproval)
	if err := _CAToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the CAToken contract.
type CATokenApprovalForAllIterator struct {
	Event *CATokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenApprovalForAll represents a ApprovalForAll event raised by the CAToken contract.
type CATokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CAToken *CATokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CATokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CATokenApprovalForAllIterator{contract: _CAToken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CAToken *CATokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CATokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenApprovalForAll)
				if err := _CAToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CAToken *CATokenFilterer) ParseApprovalForAll(log types.Log) (*CATokenApprovalForAll, error) {
	event := new(CATokenApprovalForAll)
	if err := _CAToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenDeletedTokensIterator is returned from FilterDeletedTokens and is used to iterate over the raw logs and unpacked data for DeletedTokens events raised by the CAToken contract.
type CATokenDeletedTokensIterator struct {
	Event *CATokenDeletedTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenDeletedTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenDeletedTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenDeletedTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenDeletedTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenDeletedTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenDeletedTokens represents a DeletedTokens event raised by the CAToken contract.
type CATokenDeletedTokens struct {
	DeleteIds []*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDeletedTokens is a free log retrieval operation binding the contract event 0xf251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f.
//
// Solidity: event DeletedTokens(uint256[] indexed deleteIds)
func (_CAToken *CATokenFilterer) FilterDeletedTokens(opts *bind.FilterOpts, deleteIds [][]*big.Int) (*CATokenDeletedTokensIterator, error) {

	var deleteIdsRule []interface{}
	for _, deleteIdsItem := range deleteIds {
		deleteIdsRule = append(deleteIdsRule, deleteIdsItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "DeletedTokens", deleteIdsRule)
	if err != nil {
		return nil, err
	}
	return &CATokenDeletedTokensIterator{contract: _CAToken.contract, event: "DeletedTokens", logs: logs, sub: sub}, nil
}

// WatchDeletedTokens is a free log subscription operation binding the contract event 0xf251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f.
//
// Solidity: event DeletedTokens(uint256[] indexed deleteIds)
func (_CAToken *CATokenFilterer) WatchDeletedTokens(opts *bind.WatchOpts, sink chan<- *CATokenDeletedTokens, deleteIds [][]*big.Int) (event.Subscription, error) {

	var deleteIdsRule []interface{}
	for _, deleteIdsItem := range deleteIds {
		deleteIdsRule = append(deleteIdsRule, deleteIdsItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "DeletedTokens", deleteIdsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenDeletedTokens)
				if err := _CAToken.contract.UnpackLog(event, "DeletedTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeletedTokens is a log parse operation binding the contract event 0xf251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f.
//
// Solidity: event DeletedTokens(uint256[] indexed deleteIds)
func (_CAToken *CATokenFilterer) ParseDeletedTokens(log types.Log) (*CATokenDeletedTokens, error) {
	event := new(CATokenDeletedTokens)
	if err := _CAToken.contract.UnpackLog(event, "DeletedTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenMintedIterator is returned from FilterMinted and is used to iterate over the raw logs and unpacked data for Minted events raised by the CAToken contract.
type CATokenMintedIterator struct {
	Event *CATokenMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenMinted represents a Minted event raised by the CAToken contract.
type CATokenMinted struct {
	From    common.Address
	TokenID *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinted is a free log retrieval operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address indexed _from, uint256 indexed tokenID)
func (_CAToken *CATokenFilterer) FilterMinted(opts *bind.FilterOpts, _from []common.Address, tokenID []*big.Int) (*CATokenMintedIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "Minted", _fromRule, tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &CATokenMintedIterator{contract: _CAToken.contract, event: "Minted", logs: logs, sub: sub}, nil
}

// WatchMinted is a free log subscription operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address indexed _from, uint256 indexed tokenID)
func (_CAToken *CATokenFilterer) WatchMinted(opts *bind.WatchOpts, sink chan<- *CATokenMinted, _from []common.Address, tokenID []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "Minted", _fromRule, tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenMinted)
				if err := _CAToken.contract.UnpackLog(event, "Minted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinted is a log parse operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address indexed _from, uint256 indexed tokenID)
func (_CAToken *CATokenFilterer) ParseMinted(log types.Log) (*CATokenMinted, error) {
	event := new(CATokenMinted)
	if err := _CAToken.contract.UnpackLog(event, "Minted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CAToken contract.
type CATokenOwnershipTransferredIterator struct {
	Event *CATokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenOwnershipTransferred represents a OwnershipTransferred event raised by the CAToken contract.
type CATokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CAToken *CATokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CATokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CATokenOwnershipTransferredIterator{contract: _CAToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CAToken *CATokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CATokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenOwnershipTransferred)
				if err := _CAToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CAToken *CATokenFilterer) ParseOwnershipTransferred(log types.Log) (*CATokenOwnershipTransferred, error) {
	event := new(CATokenOwnershipTransferred)
	if err := _CAToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CAToken contract.
type CATokenRoleAdminChangedIterator struct {
	Event *CATokenRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenRoleAdminChanged represents a RoleAdminChanged event raised by the CAToken contract.
type CATokenRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CAToken *CATokenFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CATokenRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CATokenRoleAdminChangedIterator{contract: _CAToken.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CAToken *CATokenFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CATokenRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenRoleAdminChanged)
				if err := _CAToken.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CAToken *CATokenFilterer) ParseRoleAdminChanged(log types.Log) (*CATokenRoleAdminChanged, error) {
	event := new(CATokenRoleAdminChanged)
	if err := _CAToken.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CAToken contract.
type CATokenRoleGrantedIterator struct {
	Event *CATokenRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenRoleGranted represents a RoleGranted event raised by the CAToken contract.
type CATokenRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CATokenRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CATokenRoleGrantedIterator{contract: _CAToken.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CATokenRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenRoleGranted)
				if err := _CAToken.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) ParseRoleGranted(log types.Log) (*CATokenRoleGranted, error) {
	event := new(CATokenRoleGranted)
	if err := _CAToken.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CAToken contract.
type CATokenRoleRevokedIterator struct {
	Event *CATokenRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenRoleRevoked represents a RoleRevoked event raised by the CAToken contract.
type CATokenRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CATokenRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CATokenRoleRevokedIterator{contract: _CAToken.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CATokenRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenRoleRevoked)
				if err := _CAToken.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) ParseRoleRevoked(log types.Log) (*CATokenRoleRevoked, error) {
	event := new(CATokenRoleRevoked)
	if err := _CAToken.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the CAToken contract.
type CATokenTransferIterator struct {
	Event *CATokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenTransfer represents a Transfer event raised by the CAToken contract.
type CATokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CATokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CATokenTransferIterator{contract: _CAToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CATokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenTransfer)
				if err := _CAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) ParseTransfer(log types.Log) (*CATokenTransfer, error) {
	event := new(CATokenTransfer)
	if err := _CAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
