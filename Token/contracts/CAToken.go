// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CAToken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// CATokenMetaData contains all meta data concerning the CAToken contract.
var CATokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_server\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"deleteIds\",\"type\":\"uint256[]\"}],\"name\":\"DeletedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SERVER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_serverAddress\",\"type\":\"address\"}],\"name\":\"addServerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"deleteIds\",\"type\":\"uint256[]\"}],\"name\":\"expiredContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_resourceID\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfDedstruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedNonce\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b5060405162005202380380620052028339818101604052810190620000379190620005fb565b8282620000596200004d6200014460201b60201c565b6200014c60201b60201c565b816003908051906020019062000071929190620004b6565b5080600490805190602001906200008a929190620004b6565b505050620000b16000801b620000a56200014460201b60201c565b6200021260201b60201c565b620000e37fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc77826200021260201b60201c565b620001247fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc77620001186200014460201b60201c565b6200021260201b60201c565b6200013b600b6200025a60201b620015dc1760201c565b50505062000867565b600033905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200022982826200027060201b620015f21760201c565b6200025581600160008581526020019081526020016000206200028660201b620016001790919060201c565b505050565b6001816000016000828254019250508190555050565b620002828282620002be60201b60201c565b5050565b6000620002b6836000018373ffffffffffffffffffffffffffffffffffffffff1660001b620003af60201b60201c565b905092915050565b620002d082826200042960201b60201c565b620003ab57600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620003506200014460201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620003c383836200049360201b60201c565b6200041e57826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000423565b600090505b92915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b828054620004c4906200075e565b90600052602060002090601f016020900481019282620004e8576000855562000534565b82601f106200050357805160ff191683800117855562000534565b8280016001018555821562000534579182015b828111156200053357825182559160200191906001019062000516565b5b50905062000543919062000547565b5090565b5b808211156200056257600081600090555060010162000548565b5090565b60006200057d6200057784620006be565b62000695565b9050828152602081018484840111156200059c576200059b6200082d565b5b620005a984828562000728565b509392505050565b600081519050620005c2816200084d565b92915050565b600082601f830112620005e057620005df62000828565b5b8151620005f284826020860162000566565b91505092915050565b60008060006060848603121562000617576200061662000837565b5b600084015167ffffffffffffffff81111562000638576200063762000832565b5b6200064686828701620005c8565b935050602084015167ffffffffffffffff8111156200066a576200066962000832565b5b6200067886828701620005c8565b92505060406200068b86828701620005b1565b9150509250925092565b6000620006a1620006b4565b9050620006af828262000794565b919050565b6000604051905090565b600067ffffffffffffffff821115620006dc57620006db620007f9565b5b620006e7826200083c565b9050602081019050919050565b6000620007018262000708565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620007485780820151818401526020810190506200072b565b8381111562000758576000848401525b50505050565b600060028204905060018216806200077757607f821691505b602082108114156200078e576200078d620007ca565b5b50919050565b6200079f826200083c565b810181811067ffffffffffffffff82111715620007c157620007c0620007f9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200085881620006f4565b81146200086457600080fd5b50565b61498b80620008776000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80639010d07c1161010f578063ba7aef43116100a2578063d69c3d3011610071578063d69c3d301461059e578063d6b8b9c9146105bc578063e985e9c5146105c6578063f2fde38b146105f6576101e5565b8063ba7aef4314610506578063c87b56dd14610522578063ca15c87314610552578063d547741f14610582576101e5565b80639aa94b2c116100de5780639aa94b2c14610494578063a217fddf146104b0578063a22cb465146104ce578063b88d4fde146104ea576101e5565b80639010d07c146103e657806391d148541461041657806395d89b41146104465780639723fb6d14610464576101e5565b80632f2ff15d1161018757806370a082311161015657806370a0823114610372578063715018a6146103a25780637dbc690f146103ac5780638da5cb5b146103c8576101e5565b80632f2ff15d146102ee57806336568abe1461030a57806342842e0e146103265780636352211e14610342576101e5565b8063095ea7b3116101c3578063095ea7b31461026857806318cf28341461028457806323b872dd146102a2578063248a9ca3146102be576101e5565b806301ffc9a7146101ea57806306fdde031461021a578063081812fc14610238575b600080fd5b61020460048036038101906101ff9190613367565b610612565b6040516102119190613999565b60405180910390f35b610222610624565b60405161022f91906139cf565b60405180910390f35b610252600480360381019061024d91906133c1565b6106b6565b60405161025f9190613932565b60405180910390f35b610282600480360381019061027d9190613231565b61073b565b005b61028c610853565b60405161029991906139b4565b60405180910390f35b6102bc60048036038101906102b791906130ac565b610877565b005b6102d860048036038101906102d391906132ba565b6108d7565b6040516102e591906139b4565b60405180910390f35b610308600480360381019061030391906132e7565b6108f6565b005b610324600480360381019061031f91906132e7565b61092a565b005b610340600480360381019061033b91906130ac565b61095e565b005b61035c600480360381019061035791906133c1565b61097e565b6040516103699190613932565b60405180910390f35b61038c6004803603810190610387919061303f565b610a30565b6040516103999190613cd1565b60405180910390f35b6103aa610ae8565b005b6103c660048036038101906103c1919061303f565b610b70565b005b6103d0610c19565b6040516103dd9190613932565b60405180910390f35b61040060048036038101906103fb9190613327565b610c43565b60405161040d9190613932565b60405180910390f35b610430600480360381019061042b91906132e7565b610c72565b60405161043d9190613999565b60405180910390f35b61044e610cdc565b60405161045b91906139cf565b60405180910390f35b61047e600480360381019061047991906133c1565b610d6e565b60405161048b9190613999565b60405180910390f35b6104ae60048036038101906104a99190613271565b610d8e565b005b6104b8610e86565b6040516104c591906139b4565b60405180910390f35b6104e860048036038101906104e39190613182565b610e8d565b005b61050460048036038101906104ff91906130ff565b61100e565b005b610520600480360381019061051b91906131c2565b611070565b005b61053c600480360381019061053791906133c1565b6111f9565b60405161054991906139cf565b60405180910390f35b61056c600480360381019061056791906132ba565b61134b565b6040516105799190613cd1565b60405180910390f35b61059c600480360381019061059791906132e7565b61136f565b005b6105a66113a3565b6040516105b39190613cd1565b60405180910390f35b6105c46113af565b005b6105e060048036038101906105db919061306c565b611450565b6040516105ed9190613999565b60405180910390f35b610610600480360381019061060b919061303f565b6114e4565b005b600061061d82611630565b9050919050565b60606003805461063390614014565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90614014565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b5050505050905090565b60006106c182611712565b610700576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f790613bd1565b60405180910390fd5b6007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107468261097e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90613c71565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107d661177e565b73ffffffffffffffffffffffffffffffffffffffff1614806108055750610804816107ff61177e565b611450565b5b610844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083b90613b11565b60405180910390fd5b61084e8383611786565b505050565b7fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc7781565b61088861088261177e565b8261183f565b6108c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108be90613c91565b60405180910390fd5b6108d283838361191d565b505050565b6000806000838152602001908152602001600020600101549050919050565b6109008282611b79565b610925816001600085815260200190815260200160002061160090919063ffffffff16565b505050565b6109348282611ba2565b6109598160016000858152602001908152602001600020611c2590919063ffffffff16565b505050565b6109798383836040518060200160405280600081525061100e565b505050565b6000806005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1e90613b51565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9890613b31565b60405180910390fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610af061177e565b73ffffffffffffffffffffffffffffffffffffffff16610b0e610c19565b73ffffffffffffffffffffffffffffffffffffffff1614610b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5b90613bf1565b60405180910390fd5b610b6e6000611c55565b565b610b7861177e565b73ffffffffffffffffffffffffffffffffffffffff16610b96610c19565b73ffffffffffffffffffffffffffffffffffffffff1614610bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be390613bf1565b60405180910390fd5b610c167fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc7782611d1b565b50565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610c6a8260016000868152602001908152602001600020611d4f90919063ffffffff16565b905092915050565b600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060048054610ceb90614014565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1790614014565b8015610d645780601f10610d3957610100808354040283529160200191610d64565b820191906000526020600020905b815481529060010190602001808311610d4757829003601f168201915b5050505050905090565b600a6020528060005260406000206000915054906101000a900460ff1681565b610dbf7fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc77610dba61177e565b610c72565b610dfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df590613c11565b60405180910390fd5b60005b8151811015610e4057610e2d828281518110610e2057610e1f6141ad565b5b6020026020010151611d69565b8080610e3890614077565b915050610e01565b5080604051610e4f91906138bd565b60405180910390207ff251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f60405160405180910390a250565b6000801b81565b610e9561177e565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efa90613ab1565b60405180910390fd5b8060086000610f1061177e565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16610fbd61177e565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516110029190613999565b60405180910390a35050565b61101f61101961177e565b8361183f565b61105e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105590613c91565b60405180910390fd5b61106a84848484611dbc565b50505050565b6110a17fa8a7bc421f721cb936ea99efdad79237e6ee0b871a2a08cf648691f9584cdc7761109c61177e565b610c72565b6110e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d7906139f1565b60405180910390fd5b600a600082815260200190815260200160002060009054906101000a900460ff1615611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890613af1565b60405180910390fd5b6111548361114f600c611e18565b611e26565b611167611161600c611e18565b83611ff4565b6001600a600083815260200190815260200160002060006101000a81548160ff02191690831515021790555061119d600c611e18565b8373ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe60405160405180910390a36111ea600c6115dc565b6111f4600b6115dc565b505050565b606061120482611712565b611243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123a90613bb1565b60405180910390fd5b600060096000848152602001908152602001600020805461126390614014565b80601f016020809104026020016040519081016040528092919081815260200182805461128f90614014565b80156112dc5780601f106112b1576101008083540402835291602001916112dc565b820191906000526020600020905b8154815290600101906020018083116112bf57829003601f168201915b5050505050905060006112ed612068565b9050600081511415611303578192505050611346565b6000825111156113385780826040516020016113209291906138d4565b60405160208183030381529060405292505050611346565b6113418461207f565b925050505b919050565b600061136860016000848152602001908152602001600020612126565b9050919050565b611379828261213b565b61139e8160016000858152602001908152602001600020611c2590919063ffffffff16565b505050565b600b8060000154905081565b6113b761177e565b73ffffffffffffffffffffffffffffffffffffffff166113d5610c19565b73ffffffffffffffffffffffffffffffffffffffff161461142b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142290613bf1565b60405180910390fd5b6000611435610c19565b90508073ffffffffffffffffffffffffffffffffffffffff16ff5b6000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6114ec61177e565b73ffffffffffffffffffffffffffffffffffffffff1661150a610c19565b73ffffffffffffffffffffffffffffffffffffffff1614611560576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155790613bf1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156115d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c790613a51565b60405180910390fd5b6115d981611c55565b50565b6001816000016000828254019250508190555050565b6115fc8282612164565b5050565b6000611628836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612244565b905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806116fb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061170b575061170a826122b4565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816007600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166117f98361097e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061184a82611712565b611889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188090613ad1565b60405180910390fd5b60006118948361097e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061190357508373ffffffffffffffffffffffffffffffffffffffff166118eb846106b6565b73ffffffffffffffffffffffffffffffffffffffff16145b8061191457506119138185611450565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661193d8261097e565b73ffffffffffffffffffffffffffffffffffffffff1614611993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198a90613c31565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fa90613a91565b60405180910390fd5b611a0e83838361232e565b611a19600082611786565b6001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a699190613ef6565b925050819055506001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ac09190613e15565b92505081905550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b611b82826108d7565b611b9381611b8e61177e565b612333565b611b9d8383612164565b505050565b611baa61177e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611c17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0e90613cb1565b60405180910390fd5b611c2182826123d0565b5050565b6000611c4d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6124b1565b905092915050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611d2582826115f2565b611d4a816001600085815260200190815260200160002061160090919063ffffffff16565b505050565b6000611d5e83600001836125c5565b60001c905092915050565b611d72816125f0565b6000600960008381526020019081526020016000208054611d9290614014565b905014611db957600960008281526020019081526020016000206000611db89190612d60565b5b50565b611dc784848461191d565b611dd384848484612701565b611e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0990613a31565b60405180910390fd5b50505050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8d90613b91565b60405180910390fd5b611e9f81611712565b15611edf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed690613a71565b60405180910390fd5b611eeb6000838361232e565b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f3b9190613e15565b92505081905550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b611ffd82611712565b61203c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203390613b71565b60405180910390fd5b80600960008481526020019081526020016000209080519060200190612063929190612da0565b505050565b606060405180602001604052806000815250905090565b606061208a82611712565b6120c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c090613c51565b60405180910390fd5b60006120d3612068565b905060008151116120f3576040518060200160405280600081525061211e565b806120fd84612898565b60405160200161210e9291906138d4565b6040516020818303038152906040525b915050919050565b6000612134826000016129f9565b9050919050565b612144826108d7565b6121558161215061177e565b612333565b61215f83836123d0565b505050565b61216e8282610c72565b61224057600160008084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506121e561177e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60006122508383612a0a565b6122a95782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506122ae565b600090505b92915050565b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612327575061232682612a2d565b5b9050919050565b505050565b61233d8282610c72565b6123cc576123628173ffffffffffffffffffffffffffffffffffffffff166014612aa7565b6123708360001c6020612aa7565b6040516020016123819291906138f8565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c391906139cf565b60405180910390fd5b5050565b6123da8282610c72565b156124ad57600080600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061245261177e565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600080836001016000848152602001908152602001600020549050600081146125b95760006001826124e39190613ef6565b90506000600186600001805490506124fb9190613ef6565b905081811461256a57600086600001828154811061251c5761251b6141ad565b5b90600052602060002001549050808760000184815481106125405761253f6141ad565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061257e5761257d61417e565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506125bf565b60009150505b92915050565b60008260000182815481106125dd576125dc6141ad565b5b9060005260206000200154905092915050565b60006125fb8261097e565b90506126098160008461232e565b612614600083611786565b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126649190613ef6565b925050819055506005600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b60006127228473ffffffffffffffffffffffffffffffffffffffff16612ce3565b1561288b578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261274b61177e565b8786866040518563ffffffff1660e01b815260040161276d949392919061394d565b602060405180830381600087803b15801561278757600080fd5b505af19250505080156127b857506040513d601f19601f820116820180604052508101906127b59190613394565b60015b61283b573d80600081146127e8576040519150601f19603f3d011682016040523d82523d6000602084013e6127ed565b606091505b50600081511415612833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161282a90613a31565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612890565b600190505b949350505050565b606060008214156128e0576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506129f4565b600082905060005b600082146129125780806128fb90614077565b915050600a8261290b9190613e6b565b91506128e8565b60008167ffffffffffffffff81111561292e5761292d6141dc565b5b6040519080825280601f01601f1916602001820160405280156129605781602001600182028036833780820191505090505b5090505b600085146129ed576001826129799190613ef6565b9150600a8561298891906140c0565b60306129949190613e15565b60f81b8183815181106129aa576129a96141ad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856129e69190613e6b565b9450612964565b8093505050505b919050565b600081600001805490509050919050565b600080836001016000848152602001908152602001600020541415905092915050565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612aa05750612a9f82612cf6565b5b9050919050565b606060006002836002612aba9190613e9c565b612ac49190613e15565b67ffffffffffffffff811115612add57612adc6141dc565b5b6040519080825280601f01601f191660200182016040528015612b0f5781602001600182028036833780820191505090505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612b4757612b466141ad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612bab57612baa6141ad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060006001846002612beb9190613e9c565b612bf59190613e15565b90505b6001811115612c95577f3031323334353637383961626364656600000000000000000000000000000000600f861660108110612c3757612c366141ad565b5b1a60f81b828281518110612c4e57612c4d6141ad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c945080612c8e90613fea565b9050612bf8565b5060008414612cd9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cd090613a11565b60405180910390fd5b8091505092915050565b600080823b905060008111915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b508054612d6c90614014565b6000825580601f10612d7e5750612d9d565b601f016020900490600052602060002090810190612d9c9190612e26565b5b50565b828054612dac90614014565b90600052602060002090601f016020900481019282612dce5760008555612e15565b82601f10612de757805160ff1916838001178555612e15565b82800160010185558215612e15579182015b82811115612e14578251825591602001919060010190612df9565b5b509050612e229190612e26565b5090565b5b80821115612e3f576000816000905550600101612e27565b5090565b6000612e56612e5184613d11565b613cec565b90508083825260208201905082856020860282011115612e7957612e78614210565b5b60005b85811015612ea95781612e8f888261302a565b845260208401935060208301925050600181019050612e7c565b5050509392505050565b6000612ec6612ec184613d3d565b613cec565b905082815260208101848484011115612ee257612ee1614215565b5b612eed848285613fa8565b509392505050565b6000612f08612f0384613d6e565b613cec565b905082815260208101848484011115612f2457612f23614215565b5b612f2f848285613fa8565b509392505050565b600081359050612f46816148e2565b92915050565b600082601f830112612f6157612f6061420b565b5b8135612f71848260208601612e43565b91505092915050565b600081359050612f89816148f9565b92915050565b600081359050612f9e81614910565b92915050565b600081359050612fb381614927565b92915050565b600081519050612fc881614927565b92915050565b600082601f830112612fe357612fe261420b565b5b8135612ff3848260208601612eb3565b91505092915050565b600082601f8301126130115761301061420b565b5b8135613021848260208601612ef5565b91505092915050565b6000813590506130398161493e565b92915050565b6000602082840312156130555761305461421f565b5b600061306384828501612f37565b91505092915050565b600080604083850312156130835761308261421f565b5b600061309185828601612f37565b92505060206130a285828601612f37565b9150509250929050565b6000806000606084860312156130c5576130c461421f565b5b60006130d386828701612f37565b93505060206130e486828701612f37565b92505060406130f58682870161302a565b9150509250925092565b600080600080608085870312156131195761311861421f565b5b600061312787828801612f37565b945050602061313887828801612f37565b93505060406131498782880161302a565b925050606085013567ffffffffffffffff81111561316a5761316961421a565b5b61317687828801612fce565b91505092959194509250565b600080604083850312156131995761319861421f565b5b60006131a785828601612f37565b92505060206131b885828601612f7a565b9150509250929050565b6000806000606084860312156131db576131da61421f565b5b60006131e986828701612f37565b935050602084013567ffffffffffffffff81111561320a5761320961421a565b5b61321686828701612ffc565b92505060406132278682870161302a565b9150509250925092565b600080604083850312156132485761324761421f565b5b600061325685828601612f37565b92505060206132678582860161302a565b9150509250929050565b6000602082840312156132875761328661421f565b5b600082013567ffffffffffffffff8111156132a5576132a461421a565b5b6132b184828501612f4c565b91505092915050565b6000602082840312156132d0576132cf61421f565b5b60006132de84828501612f8f565b91505092915050565b600080604083850312156132fe576132fd61421f565b5b600061330c85828601612f8f565b925050602061331d85828601612f37565b9150509250929050565b6000806040838503121561333e5761333d61421f565b5b600061334c85828601612f8f565b925050602061335d8582860161302a565b9150509250929050565b60006020828403121561337d5761337c61421f565b5b600061338b84828501612fa4565b91505092915050565b6000602082840312156133aa576133a961421f565b5b60006133b884828501612fb9565b91505092915050565b6000602082840312156133d7576133d661421f565b5b60006133e58482850161302a565b91505092915050565b60006133fa83836138ae565b60208301905092915050565b61340f81613f2a565b82525050565b600061342082613daf565b61342a8185613ddd565b935061343583613d9f565b8060005b8381101561346657815161344d88826133ee565b975061345883613dd0565b925050600181019050613439565b5085935050505092915050565b61347c81613f3c565b82525050565b61348b81613f48565b82525050565b600061349c82613dba565b6134a68185613de8565b93506134b6818560208601613fb7565b6134bf81614224565b840191505092915050565b60006134d582613dc5565b6134df8185613df9565b93506134ef818560208601613fb7565b6134f881614224565b840191505092915050565b600061350e82613dc5565b6135188185613e0a565b9350613528818560208601613fb7565b80840191505092915050565b6000613541602d83613df9565b915061354c82614235565b604082019050919050565b6000613564602083613df9565b915061356f82614284565b602082019050919050565b6000613587603283613df9565b9150613592826142ad565b604082019050919050565b60006135aa602683613df9565b91506135b5826142fc565b604082019050919050565b60006135cd601c83613df9565b91506135d88261434b565b602082019050919050565b60006135f0602483613df9565b91506135fb82614374565b604082019050919050565b6000613613601983613df9565b915061361e826143c3565b602082019050919050565b6000613636602c83613df9565b9150613641826143ec565b604082019050919050565b6000613659602d83613df9565b91506136648261443b565b604082019050919050565b600061367c603883613df9565b91506136878261448a565b604082019050919050565b600061369f602a83613df9565b91506136aa826144d9565b604082019050919050565b60006136c2602983613df9565b91506136cd82614528565b604082019050919050565b60006136e5602e83613df9565b91506136f082614577565b604082019050919050565b6000613708602083613df9565b9150613713826145c6565b602082019050919050565b600061372b603183613df9565b9150613736826145ef565b604082019050919050565b600061374e602c83613df9565b91506137598261463e565b604082019050919050565b6000613771602083613df9565b915061377c8261468d565b602082019050919050565b6000613794602e83613df9565b915061379f826146b6565b604082019050919050565b60006137b7602983613df9565b91506137c282614705565b604082019050919050565b60006137da602f83613df9565b91506137e582614754565b604082019050919050565b60006137fd602183613df9565b9150613808826147a3565b604082019050919050565b6000613820603183613df9565b915061382b826147f2565b604082019050919050565b6000613843601783613e0a565b915061384e82614841565b601782019050919050565b6000613866601183613e0a565b91506138718261486a565b601182019050919050565b6000613889602f83613df9565b915061389482614893565b604082019050919050565b6138a881613f9e565b82525050565b6138b781613f9e565b82525050565b60006138c98284613415565b915081905092915050565b60006138e08285613503565b91506138ec8284613503565b91508190509392505050565b600061390382613836565b915061390f8285613503565b915061391a82613859565b91506139268284613503565b91508190509392505050565b60006020820190506139476000830184613406565b92915050565b60006080820190506139626000830187613406565b61396f6020830186613406565b61397c604083018561389f565b818103606083015261398e8184613491565b905095945050505050565b60006020820190506139ae6000830184613473565b92915050565b60006020820190506139c96000830184613482565b92915050565b600060208201905081810360008301526139e981846134ca565b905092915050565b60006020820190508181036000830152613a0a81613534565b9050919050565b60006020820190508181036000830152613a2a81613557565b9050919050565b60006020820190508181036000830152613a4a8161357a565b9050919050565b60006020820190508181036000830152613a6a8161359d565b9050919050565b60006020820190508181036000830152613a8a816135c0565b9050919050565b60006020820190508181036000830152613aaa816135e3565b9050919050565b60006020820190508181036000830152613aca81613606565b9050919050565b60006020820190508181036000830152613aea81613629565b9050919050565b60006020820190508181036000830152613b0a8161364c565b9050919050565b60006020820190508181036000830152613b2a8161366f565b9050919050565b60006020820190508181036000830152613b4a81613692565b9050919050565b60006020820190508181036000830152613b6a816136b5565b9050919050565b60006020820190508181036000830152613b8a816136d8565b9050919050565b60006020820190508181036000830152613baa816136fb565b9050919050565b60006020820190508181036000830152613bca8161371e565b9050919050565b60006020820190508181036000830152613bea81613741565b9050919050565b60006020820190508181036000830152613c0a81613764565b9050919050565b60006020820190508181036000830152613c2a81613787565b9050919050565b60006020820190508181036000830152613c4a816137aa565b9050919050565b60006020820190508181036000830152613c6a816137cd565b9050919050565b60006020820190508181036000830152613c8a816137f0565b9050919050565b60006020820190508181036000830152613caa81613813565b9050919050565b60006020820190508181036000830152613cca8161387c565b9050919050565b6000602082019050613ce6600083018461389f565b92915050565b6000613cf6613d07565b9050613d028282614046565b919050565b6000604051905090565b600067ffffffffffffffff821115613d2c57613d2b6141dc565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613d5857613d576141dc565b5b613d6182614224565b9050602081019050919050565b600067ffffffffffffffff821115613d8957613d886141dc565b5b613d9282614224565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613e2082613f9e565b9150613e2b83613f9e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613e6057613e5f6140f1565b5b828201905092915050565b6000613e7682613f9e565b9150613e8183613f9e565b925082613e9157613e90614120565b5b828204905092915050565b6000613ea782613f9e565b9150613eb283613f9e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613eeb57613eea6140f1565b5b828202905092915050565b6000613f0182613f9e565b9150613f0c83613f9e565b925082821015613f1f57613f1e6140f1565b5b828203905092915050565b6000613f3582613f7e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015613fd5578082015181840152602081019050613fba565b83811115613fe4576000848401525b50505050565b6000613ff582613f9e565b91506000821415614009576140086140f1565b5b600182039050919050565b6000600282049050600182168061402c57607f821691505b602082108114156140405761403f61414f565b5b50919050565b61404f82614224565b810181811067ffffffffffffffff8211171561406e5761406d6141dc565b5b80604052505050565b600061408282613f9e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140b5576140b46140f1565b5b600182019050919050565b60006140cb82613f9e565b91506140d683613f9e565b9250826140e6576140e5614120565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f796f7520646f6e277420686176652061636365737320746f20746865206d696e60008201527f74696e672066756e6374696f6e00000000000000000000000000000000000000602082015250565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f6e6f6e636520697320616c72656164792075736564206279206120707265766960008201527f6f7573206d696e742063616c6c00000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f746869732069732061776b776172642c20796f75277265206e6f7420616c6c6f60008201527f77656420746f20646f2074686174000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6148eb81613f2a565b81146148f657600080fd5b50565b61490281613f3c565b811461490d57600080fd5b50565b61491981613f48565b811461492457600080fd5b50565b61493081613f52565b811461493b57600080fd5b50565b61494781613f9e565b811461495257600080fd5b5056fea26469706673582212209ddb1e6e3af44e80ddba0957bd3a9e2a505fd23819d6d1d8a0dc999d0be0f33d64736f6c63430008070033",
}

// CATokenABI is the input ABI used to generate the binding from.
// Deprecated: Use CATokenMetaData.ABI instead.
var CATokenABI = CATokenMetaData.ABI

// CATokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CATokenMetaData.Bin instead.
var CATokenBin = CATokenMetaData.Bin

// DeployCAToken deploys a new Ethereum contract, binding an instance of CAToken to it.
func DeployCAToken(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, _server common.Address) (common.Address, *types.Transaction, *CAToken, error) {
	parsed, err := CATokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CATokenBin), backend, name, symbol, _server)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CAToken{CATokenCaller: CATokenCaller{contract: contract}, CATokenTransactor: CATokenTransactor{contract: contract}, CATokenFilterer: CATokenFilterer{contract: contract}}, nil
}

// CAToken is an auto generated Go binding around an Ethereum contract.
type CAToken struct {
	CATokenCaller     // Read-only binding to the contract
	CATokenTransactor // Write-only binding to the contract
	CATokenFilterer   // Log filterer for contract events
}

// CATokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type CATokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CATokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CATokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CATokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CATokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CATokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CATokenSession struct {
	Contract     *CAToken          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CATokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CATokenCallerSession struct {
	Contract *CATokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// CATokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CATokenTransactorSession struct {
	Contract     *CATokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// CATokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type CATokenRaw struct {
	Contract *CAToken // Generic contract binding to access the raw methods on
}

// CATokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CATokenCallerRaw struct {
	Contract *CATokenCaller // Generic read-only contract binding to access the raw methods on
}

// CATokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CATokenTransactorRaw struct {
	Contract *CATokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCAToken creates a new instance of CAToken, bound to a specific deployed contract.
func NewCAToken(address common.Address, backend bind.ContractBackend) (*CAToken, error) {
	contract, err := bindCAToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CAToken{CATokenCaller: CATokenCaller{contract: contract}, CATokenTransactor: CATokenTransactor{contract: contract}, CATokenFilterer: CATokenFilterer{contract: contract}}, nil
}

// NewCATokenCaller creates a new read-only instance of CAToken, bound to a specific deployed contract.
func NewCATokenCaller(address common.Address, caller bind.ContractCaller) (*CATokenCaller, error) {
	contract, err := bindCAToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CATokenCaller{contract: contract}, nil
}

// NewCATokenTransactor creates a new write-only instance of CAToken, bound to a specific deployed contract.
func NewCATokenTransactor(address common.Address, transactor bind.ContractTransactor) (*CATokenTransactor, error) {
	contract, err := bindCAToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CATokenTransactor{contract: contract}, nil
}

// NewCATokenFilterer creates a new log filterer instance of CAToken, bound to a specific deployed contract.
func NewCATokenFilterer(address common.Address, filterer bind.ContractFilterer) (*CATokenFilterer, error) {
	contract, err := bindCAToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CATokenFilterer{contract: contract}, nil
}

// bindCAToken binds a generic wrapper to an already deployed contract.
func bindCAToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(CATokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CAToken *CATokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CAToken.Contract.CATokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CAToken *CATokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.Contract.CATokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CAToken *CATokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CAToken.Contract.CATokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CAToken *CATokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CAToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CAToken *CATokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CAToken *CATokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CAToken.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CAToken *CATokenCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CAToken *CATokenSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CAToken.Contract.DEFAULTADMINROLE(&_CAToken.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_CAToken *CATokenCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _CAToken.Contract.DEFAULTADMINROLE(&_CAToken.CallOpts)
}

// SERVERROLE is a free data retrieval call binding the contract method 0x18cf2834.
//
// Solidity: function SERVER_ROLE() view returns(bytes32)
func (_CAToken *CATokenCaller) SERVERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "SERVER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SERVERROLE is a free data retrieval call binding the contract method 0x18cf2834.
//
// Solidity: function SERVER_ROLE() view returns(bytes32)
func (_CAToken *CATokenSession) SERVERROLE() ([32]byte, error) {
	return _CAToken.Contract.SERVERROLE(&_CAToken.CallOpts)
}

// SERVERROLE is a free data retrieval call binding the contract method 0x18cf2834.
//
// Solidity: function SERVER_ROLE() view returns(bytes32)
func (_CAToken *CATokenCallerSession) SERVERROLE() ([32]byte, error) {
	return _CAToken.Contract.SERVERROLE(&_CAToken.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CAToken *CATokenCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CAToken *CATokenSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CAToken.Contract.BalanceOf(&_CAToken.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_CAToken *CATokenCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _CAToken.Contract.BalanceOf(&_CAToken.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CAToken *CATokenSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetApproved(&_CAToken.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetApproved(&_CAToken.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CAToken *CATokenCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CAToken *CATokenSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CAToken.Contract.GetRoleAdmin(&_CAToken.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_CAToken *CATokenCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _CAToken.Contract.GetRoleAdmin(&_CAToken.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CAToken *CATokenCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CAToken *CATokenSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetRoleMember(&_CAToken.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_CAToken *CATokenCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _CAToken.Contract.GetRoleMember(&_CAToken.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CAToken *CATokenCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CAToken *CATokenSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CAToken.Contract.GetRoleMemberCount(&_CAToken.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_CAToken *CATokenCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _CAToken.Contract.GetRoleMemberCount(&_CAToken.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CAToken *CATokenCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CAToken *CATokenSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CAToken.Contract.HasRole(&_CAToken.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_CAToken *CATokenCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _CAToken.Contract.HasRole(&_CAToken.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CAToken *CATokenCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CAToken *CATokenSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CAToken.Contract.IsApprovedForAll(&_CAToken.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_CAToken *CATokenCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _CAToken.Contract.IsApprovedForAll(&_CAToken.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CAToken *CATokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CAToken *CATokenSession) Name() (string, error) {
	return _CAToken.Contract.Name(&_CAToken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_CAToken *CATokenCallerSession) Name() (string, error) {
	return _CAToken.Contract.Name(&_CAToken.CallOpts)
}

// NextNonce is a free data retrieval call binding the contract method 0xd69c3d30.
//
// Solidity: function nextNonce() view returns(uint256 _value)
func (_CAToken *CATokenCaller) NextNonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "nextNonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextNonce is a free data retrieval call binding the contract method 0xd69c3d30.
//
// Solidity: function nextNonce() view returns(uint256 _value)
func (_CAToken *CATokenSession) NextNonce() (*big.Int, error) {
	return _CAToken.Contract.NextNonce(&_CAToken.CallOpts)
}

// NextNonce is a free data retrieval call binding the contract method 0xd69c3d30.
//
// Solidity: function nextNonce() view returns(uint256 _value)
func (_CAToken *CATokenCallerSession) NextNonce() (*big.Int, error) {
	return _CAToken.Contract.NextNonce(&_CAToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CAToken *CATokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CAToken *CATokenSession) Owner() (common.Address, error) {
	return _CAToken.Contract.Owner(&_CAToken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CAToken *CATokenCallerSession) Owner() (common.Address, error) {
	return _CAToken.Contract.Owner(&_CAToken.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CAToken *CATokenSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.OwnerOf(&_CAToken.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_CAToken *CATokenCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _CAToken.Contract.OwnerOf(&_CAToken.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CAToken *CATokenCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CAToken *CATokenSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CAToken.Contract.SupportsInterface(&_CAToken.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_CAToken *CATokenCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _CAToken.Contract.SupportsInterface(&_CAToken.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CAToken *CATokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CAToken *CATokenSession) Symbol() (string, error) {
	return _CAToken.Contract.Symbol(&_CAToken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_CAToken *CATokenCallerSession) Symbol() (string, error) {
	return _CAToken.Contract.Symbol(&_CAToken.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CAToken *CATokenCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CAToken *CATokenSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CAToken.Contract.TokenURI(&_CAToken.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_CAToken *CATokenCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _CAToken.Contract.TokenURI(&_CAToken.CallOpts, tokenId)
}

// UsedNonce is a free data retrieval call binding the contract method 0x9723fb6d.
//
// Solidity: function usedNonce(uint256 ) view returns(bool)
func (_CAToken *CATokenCaller) UsedNonce(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _CAToken.contract.Call(opts, &out, "usedNonce", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// UsedNonce is a free data retrieval call binding the contract method 0x9723fb6d.
//
// Solidity: function usedNonce(uint256 ) view returns(bool)
func (_CAToken *CATokenSession) UsedNonce(arg0 *big.Int) (bool, error) {
	return _CAToken.Contract.UsedNonce(&_CAToken.CallOpts, arg0)
}

// UsedNonce is a free data retrieval call binding the contract method 0x9723fb6d.
//
// Solidity: function usedNonce(uint256 ) view returns(bool)
func (_CAToken *CATokenCallerSession) UsedNonce(arg0 *big.Int) (bool, error) {
	return _CAToken.Contract.UsedNonce(&_CAToken.CallOpts, arg0)
}

// AddServerRole is a paid mutator transaction binding the contract method 0x7dbc690f.
//
// Solidity: function addServerRole(address _serverAddress) returns()
func (_CAToken *CATokenTransactor) AddServerRole(opts *bind.TransactOpts, _serverAddress common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "addServerRole", _serverAddress)
}

// AddServerRole is a paid mutator transaction binding the contract method 0x7dbc690f.
//
// Solidity: function addServerRole(address _serverAddress) returns()
func (_CAToken *CATokenSession) AddServerRole(_serverAddress common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.AddServerRole(&_CAToken.TransactOpts, _serverAddress)
}

// AddServerRole is a paid mutator transaction binding the contract method 0x7dbc690f.
//
// Solidity: function addServerRole(address _serverAddress) returns()
func (_CAToken *CATokenTransactorSession) AddServerRole(_serverAddress common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.AddServerRole(&_CAToken.TransactOpts, _serverAddress)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CAToken *CATokenSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Approve(&_CAToken.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Approve(&_CAToken.TransactOpts, to, tokenId)
}

// ExpiredContracts is a paid mutator transaction binding the contract method 0x9aa94b2c.
//
// Solidity: function expiredContracts(uint256[] deleteIds) returns()
func (_CAToken *CATokenTransactor) ExpiredContracts(opts *bind.TransactOpts, deleteIds []*big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "expiredContracts", deleteIds)
}

// ExpiredContracts is a paid mutator transaction binding the contract method 0x9aa94b2c.
//
// Solidity: function expiredContracts(uint256[] deleteIds) returns()
func (_CAToken *CATokenSession) ExpiredContracts(deleteIds []*big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.ExpiredContracts(&_CAToken.TransactOpts, deleteIds)
}

// ExpiredContracts is a paid mutator transaction binding the contract method 0x9aa94b2c.
//
// Solidity: function expiredContracts(uint256[] deleteIds) returns()
func (_CAToken *CATokenTransactorSession) ExpiredContracts(deleteIds []*big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.ExpiredContracts(&_CAToken.TransactOpts, deleteIds)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CAToken *CATokenSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.GrantRole(&_CAToken.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.GrantRole(&_CAToken.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0xba7aef43.
//
// Solidity: function mint(address _to, string _resourceID, uint256 _nonce) returns()
func (_CAToken *CATokenTransactor) Mint(opts *bind.TransactOpts, _to common.Address, _resourceID string, _nonce *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "mint", _to, _resourceID, _nonce)
}

// Mint is a paid mutator transaction binding the contract method 0xba7aef43.
//
// Solidity: function mint(address _to, string _resourceID, uint256 _nonce) returns()
func (_CAToken *CATokenSession) Mint(_to common.Address, _resourceID string, _nonce *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Mint(&_CAToken.TransactOpts, _to, _resourceID, _nonce)
}

// Mint is a paid mutator transaction binding the contract method 0xba7aef43.
//
// Solidity: function mint(address _to, string _resourceID, uint256 _nonce) returns()
func (_CAToken *CATokenTransactorSession) Mint(_to common.Address, _resourceID string, _nonce *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.Mint(&_CAToken.TransactOpts, _to, _resourceID, _nonce)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CAToken *CATokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CAToken *CATokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _CAToken.Contract.RenounceOwnership(&_CAToken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CAToken *CATokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CAToken.Contract.RenounceOwnership(&_CAToken.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CAToken *CATokenSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RenounceRole(&_CAToken.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RenounceRole(&_CAToken.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CAToken *CATokenSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RevokeRole(&_CAToken.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_CAToken *CATokenTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.RevokeRole(&_CAToken.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CAToken *CATokenTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CAToken *CATokenSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom0(&_CAToken.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_CAToken *CATokenTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _CAToken.Contract.SafeTransferFrom0(&_CAToken.TransactOpts, from, to, tokenId, _data)
}

// SelfDedstruct is a paid mutator transaction binding the contract method 0xd6b8b9c9.
//
// Solidity: function selfDedstruct() returns()
func (_CAToken *CATokenTransactor) SelfDedstruct(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "selfDedstruct")
}

// SelfDedstruct is a paid mutator transaction binding the contract method 0xd6b8b9c9.
//
// Solidity: function selfDedstruct() returns()
func (_CAToken *CATokenSession) SelfDedstruct() (*types.Transaction, error) {
	return _CAToken.Contract.SelfDedstruct(&_CAToken.TransactOpts)
}

// SelfDedstruct is a paid mutator transaction binding the contract method 0xd6b8b9c9.
//
// Solidity: function selfDedstruct() returns()
func (_CAToken *CATokenTransactorSession) SelfDedstruct() (*types.Transaction, error) {
	return _CAToken.Contract.SelfDedstruct(&_CAToken.TransactOpts)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CAToken *CATokenTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CAToken *CATokenSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CAToken.Contract.SetApprovalForAll(&_CAToken.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_CAToken *CATokenTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _CAToken.Contract.SetApprovalForAll(&_CAToken.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.TransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_CAToken *CATokenTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _CAToken.Contract.TransferFrom(&_CAToken.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CAToken *CATokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CAToken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CAToken *CATokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.TransferOwnership(&_CAToken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CAToken *CATokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CAToken.Contract.TransferOwnership(&_CAToken.TransactOpts, newOwner)
}

// CATokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the CAToken contract.
type CATokenApprovalIterator struct {
	Event *CATokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenApproval represents a Approval event raised by the CAToken contract.
type CATokenApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*CATokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CATokenApprovalIterator{contract: _CAToken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *CATokenApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenApproval)
				if err := _CAToken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) ParseApproval(log types.Log) (*CATokenApproval, error) {
	event := new(CATokenApproval)
	if err := _CAToken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the CAToken contract.
type CATokenApprovalForAllIterator struct {
	Event *CATokenApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenApprovalForAll represents a ApprovalForAll event raised by the CAToken contract.
type CATokenApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CAToken *CATokenFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*CATokenApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &CATokenApprovalForAllIterator{contract: _CAToken.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CAToken *CATokenFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *CATokenApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenApprovalForAll)
				if err := _CAToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_CAToken *CATokenFilterer) ParseApprovalForAll(log types.Log) (*CATokenApprovalForAll, error) {
	event := new(CATokenApprovalForAll)
	if err := _CAToken.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenDeletedTokensIterator is returned from FilterDeletedTokens and is used to iterate over the raw logs and unpacked data for DeletedTokens events raised by the CAToken contract.
type CATokenDeletedTokensIterator struct {
	Event *CATokenDeletedTokens // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenDeletedTokensIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenDeletedTokens)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenDeletedTokens)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenDeletedTokensIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenDeletedTokensIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenDeletedTokens represents a DeletedTokens event raised by the CAToken contract.
type CATokenDeletedTokens struct {
	DeleteIds []*big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDeletedTokens is a free log retrieval operation binding the contract event 0xf251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f.
//
// Solidity: event DeletedTokens(uint256[] indexed deleteIds)
func (_CAToken *CATokenFilterer) FilterDeletedTokens(opts *bind.FilterOpts, deleteIds [][]*big.Int) (*CATokenDeletedTokensIterator, error) {

	var deleteIdsRule []interface{}
	for _, deleteIdsItem := range deleteIds {
		deleteIdsRule = append(deleteIdsRule, deleteIdsItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "DeletedTokens", deleteIdsRule)
	if err != nil {
		return nil, err
	}
	return &CATokenDeletedTokensIterator{contract: _CAToken.contract, event: "DeletedTokens", logs: logs, sub: sub}, nil
}

// WatchDeletedTokens is a free log subscription operation binding the contract event 0xf251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f.
//
// Solidity: event DeletedTokens(uint256[] indexed deleteIds)
func (_CAToken *CATokenFilterer) WatchDeletedTokens(opts *bind.WatchOpts, sink chan<- *CATokenDeletedTokens, deleteIds [][]*big.Int) (event.Subscription, error) {

	var deleteIdsRule []interface{}
	for _, deleteIdsItem := range deleteIds {
		deleteIdsRule = append(deleteIdsRule, deleteIdsItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "DeletedTokens", deleteIdsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenDeletedTokens)
				if err := _CAToken.contract.UnpackLog(event, "DeletedTokens", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeletedTokens is a log parse operation binding the contract event 0xf251c5ab5fef24d6dbeafa8912645899b336579a7dc62d24486c7ade669be60f.
//
// Solidity: event DeletedTokens(uint256[] indexed deleteIds)
func (_CAToken *CATokenFilterer) ParseDeletedTokens(log types.Log) (*CATokenDeletedTokens, error) {
	event := new(CATokenDeletedTokens)
	if err := _CAToken.contract.UnpackLog(event, "DeletedTokens", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenMintedIterator is returned from FilterMinted and is used to iterate over the raw logs and unpacked data for Minted events raised by the CAToken contract.
type CATokenMintedIterator struct {
	Event *CATokenMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenMinted represents a Minted event raised by the CAToken contract.
type CATokenMinted struct {
	From    common.Address
	TokenID *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinted is a free log retrieval operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address indexed _from, uint256 indexed tokenID)
func (_CAToken *CATokenFilterer) FilterMinted(opts *bind.FilterOpts, _from []common.Address, tokenID []*big.Int) (*CATokenMintedIterator, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "Minted", _fromRule, tokenIDRule)
	if err != nil {
		return nil, err
	}
	return &CATokenMintedIterator{contract: _CAToken.contract, event: "Minted", logs: logs, sub: sub}, nil
}

// WatchMinted is a free log subscription operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address indexed _from, uint256 indexed tokenID)
func (_CAToken *CATokenFilterer) WatchMinted(opts *bind.WatchOpts, sink chan<- *CATokenMinted, _from []common.Address, tokenID []*big.Int) (event.Subscription, error) {

	var _fromRule []interface{}
	for _, _fromItem := range _from {
		_fromRule = append(_fromRule, _fromItem)
	}
	var tokenIDRule []interface{}
	for _, tokenIDItem := range tokenID {
		tokenIDRule = append(tokenIDRule, tokenIDItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "Minted", _fromRule, tokenIDRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenMinted)
				if err := _CAToken.contract.UnpackLog(event, "Minted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinted is a log parse operation binding the contract event 0x30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe.
//
// Solidity: event Minted(address indexed _from, uint256 indexed tokenID)
func (_CAToken *CATokenFilterer) ParseMinted(log types.Log) (*CATokenMinted, error) {
	event := new(CATokenMinted)
	if err := _CAToken.contract.UnpackLog(event, "Minted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CAToken contract.
type CATokenOwnershipTransferredIterator struct {
	Event *CATokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenOwnershipTransferred represents a OwnershipTransferred event raised by the CAToken contract.
type CATokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CAToken *CATokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CATokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CATokenOwnershipTransferredIterator{contract: _CAToken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CAToken *CATokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CATokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenOwnershipTransferred)
				if err := _CAToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CAToken *CATokenFilterer) ParseOwnershipTransferred(log types.Log) (*CATokenOwnershipTransferred, error) {
	event := new(CATokenOwnershipTransferred)
	if err := _CAToken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the CAToken contract.
type CATokenRoleAdminChangedIterator struct {
	Event *CATokenRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenRoleAdminChanged represents a RoleAdminChanged event raised by the CAToken contract.
type CATokenRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CAToken *CATokenFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*CATokenRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &CATokenRoleAdminChangedIterator{contract: _CAToken.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CAToken *CATokenFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *CATokenRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenRoleAdminChanged)
				if err := _CAToken.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_CAToken *CATokenFilterer) ParseRoleAdminChanged(log types.Log) (*CATokenRoleAdminChanged, error) {
	event := new(CATokenRoleAdminChanged)
	if err := _CAToken.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the CAToken contract.
type CATokenRoleGrantedIterator struct {
	Event *CATokenRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenRoleGranted represents a RoleGranted event raised by the CAToken contract.
type CATokenRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CATokenRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CATokenRoleGrantedIterator{contract: _CAToken.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *CATokenRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenRoleGranted)
				if err := _CAToken.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) ParseRoleGranted(log types.Log) (*CATokenRoleGranted, error) {
	event := new(CATokenRoleGranted)
	if err := _CAToken.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the CAToken contract.
type CATokenRoleRevokedIterator struct {
	Event *CATokenRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenRoleRevoked represents a RoleRevoked event raised by the CAToken contract.
type CATokenRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*CATokenRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &CATokenRoleRevokedIterator{contract: _CAToken.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *CATokenRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenRoleRevoked)
				if err := _CAToken.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_CAToken *CATokenFilterer) ParseRoleRevoked(log types.Log) (*CATokenRoleRevoked, error) {
	event := new(CATokenRoleRevoked)
	if err := _CAToken.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CATokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the CAToken contract.
type CATokenTransferIterator struct {
	Event *CATokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CATokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CATokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CATokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CATokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CATokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CATokenTransfer represents a Transfer event raised by the CAToken contract.
type CATokenTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*CATokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &CATokenTransferIterator{contract: _CAToken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *CATokenTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _CAToken.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CATokenTransfer)
				if err := _CAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_CAToken *CATokenFilterer) ParseTransfer(log types.Log) (*CATokenTransfer, error) {
	event := new(CATokenTransfer)
	if err := _CAToken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
